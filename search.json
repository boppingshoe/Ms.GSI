[{"path":"https://boppingshoe.github.io/Ms.GSI/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Ms.GSI authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"document contains background information integrated multistage genetic stock identification (GSI) model two parts. first part describes use package Ms.GSI conduct GSI analysis. steps include formatting input data, running integrated multistage GSI model, summarizing results. second part details technical background integrated multistage GSI model mathematical theory. separate article describe general background integrated multistage framework (add link integrated multistage paper).","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"how-to-use-ms-gsi","dir":"Articles","previous_headings":"","what":"How to use Ms.GSI","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Ms.GSI follows work flow: format input data, run integrated multistage model, summarize results/convergence diagnostics.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"input-data","dir":"Articles","previous_headings":"How to use Ms.GSI","what":"Input data","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"pieces information needed input data set: broad-scale baseline regional baseline mixture sample broad-scale population information regional population information pre-loaded example data sets available Ms.GSI. look one time. Note example data sets simulated using existing baseline archived Alaska Department Fish & Game Gene Conservation Lab (GCL). fabricated data set represent true population proportions real fisheries. example, made scenario similar Bering Sea groundfish fisheries Chinook salmon harvested bycatch originated wide range geographic areas. Within bycatch sample, interested proportion contribution lower, middle upper Yukon River reporting groups (see map ). used coast-wide data set Chinook salmon (Templin et al. 2011; Templin baseline hereafter) broad-scale baseline separate Yukon River fish non-Yukon stocks data set first stage analysis. However, genetic markers Templin baseline unable clearly distinguish lower Yukon River coastal western Alaska populations, used second baseline additional genetic markers specifically designed differentiate Yukon River Chinook salmon populations (Lee et al. 2021; Yukon River baseline hereafter) regional fine-scale baseline second stage. important note original grouping Templin baseline, Lower Yukon part Coastal Western Alaska reporting group. isolated Lower Yukon rest Coastal Western Alaska, accuracy proportion estimates likely diminish breakup Coastal Western Alaska reporting group. recommend using genetic baseline beyond original design. researchers aware capability genetic baselines utilizing integrated multistage model. example, ideal keep Coastal Western Alaska group intact broad-scale baseline, break group Lower Yukon others using fine-scale regional baseline. However, time writing, regional baseline adequate resolution still development. Collection locations color-coded reporting groups Chinook salmon represented Yukon River example. Shaded area represents Yukon River region. assembled mixture sample containing 150 individuals collection sites across Yukon River, coastal western Alaskan, Alaska Peninsula, Gulf Alaska, Kamchatka Peninsula (Russia). collections grouped five reporting groups: Lower Yukon, Middle Yukon, Upper Yukon, Coastal Western Alaska (Coastal West Alaska), Others.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"mixture","dir":"Articles","previous_headings":"How to use Ms.GSI > Input data","what":"Mixture","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"First take look baseline mixture samples. Ms.GSI accepts genotype information two format: 1) GCL format 2) package rubias format. example data sets rubias format naming convention, procedures GCL format same1. Columns 5 358 contain genotype information loci broad-scale regional baselines. specify loci baseline (can want double check, later). Ms.GSI matches loci mixture baselines long locus names consistent. fish known-origin, can specify identities adding column called known_collection mixture data set. entry known-origin match collection name broad-scale baseline. Fish unknown-origin NA entry.","code":"print(dplyr::as_tibble(mix)) #> # A tibble: 150 × 358 #>    sample_type repunit collection indiv   `GTH2B-550` `GTH2B-550.1` NOD1  NOD1.1 #>    <chr>       <lgl>   <chr>      <chr>   <chr>       <chr>         <chr> <chr>  #>  1 mixture     NA      Bering Sea fish_1  C           G             C     C      #>  2 mixture     NA      Bering Sea fish_2  C           C             C     G      #>  3 mixture     NA      Bering Sea fish_3  C           C             C     G      #>  4 mixture     NA      Bering Sea fish_4  C           C             C     C      #>  5 mixture     NA      Bering Sea fish_5  C           G             C     G      #>  6 mixture     NA      Bering Sea fish_6  C           C             C     G      #>  7 mixture     NA      Bering Sea fish_7  C           C             NA    NA     #>  8 mixture     NA      Bering Sea fish_8  C           G             NA    NA     #>  9 mixture     NA      Bering Sea fish_9  C           G             C     G      #> 10 mixture     NA      Bering Sea fish_10 C           G             NA    NA     #> # ℹ 140 more rows #> # ℹ 350 more variables: `Ots_100884-287` <chr>, `Ots_100884-287.1` <chr>, #> #   `Ots_101554-407` <chr>, `Ots_101554-407.1` <chr>, `Ots_102414-395` <chr>, #> #   `Ots_102414-395.1` <chr>, `Ots_102867-609` <chr>, `Ots_102867-609.1` <chr>, #> #   `Ots_103041-52` <chr>, `Ots_103041-52.1` <chr>, `Ots_103122-180` <chr>, #> #   `Ots_103122-180.1` <chr>, `Ots_104048-194` <chr>, `Ots_104048-194.1` <chr>, #> #   `Ots_104063-132` <chr>, `Ots_104063-132.1` <chr>, `Ots_104415-88` <chr>, …"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"broad-scale-baseline","dir":"Articles","previous_headings":"How to use Ms.GSI > Input data","what":"Broad-scale baseline","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Next, take look broad-scale (Templin) baseline example provided Ms.GSI. originally 45 loci Templin baseline, reduced marker set 28 loci due limitation data size (technical reasons). However, demonstration purpose, data set suffice.","code":"print(dplyr::as_tibble(base_templin)) #> # A tibble: 29,363 × 60 #>    sample_type repunit collection indiv   `GTH2B-550` `GTH2B-550.1` NOD1  NOD1.1 #>    <chr>       <chr>   <chr>      <chr>   <chr>       <chr>         <chr> <chr>  #>  1 reference   Russia  KBIST98L   KBIST9… C           C             C     G      #>  2 reference   Russia  KBIST98L   KBIST9… C           G             C     G      #>  3 reference   Russia  KBIST98L   KBIST9… C           G             C     G      #>  4 reference   Russia  KBIST98L   KBIST9… C           C             G     G      #>  5 reference   Russia  KBIST98L   KBIST9… C           G             G     G      #>  6 reference   Russia  KBIST98L   KBIST9… C           C             C     C      #>  7 reference   Russia  KBIST98L   KBIST9… C           G             C     G      #>  8 reference   Russia  KBIST98L   KBIST9… C           C             C     G      #>  9 reference   Russia  KBIST98L   KBIST9… C           G             C     G      #> 10 reference   Russia  KBIST98L   KBIST9… C           C             G     G      #> # ℹ 29,353 more rows #> # ℹ 52 more variables: `Ots_2KER-137` <chr>, `Ots_2KER-137.1` <chr>, #> #   `Ots_AsnRS-72` <chr>, `Ots_AsnRS-72.1` <chr>, Ots_ETIF1A <chr>, #> #   Ots_ETIF1A.1 <chr>, `Ots_GPH-318` <chr>, `Ots_GPH-318.1` <chr>, #> #   `Ots_GST-207` <chr>, `Ots_GST-207.1` <chr>, `Ots_hnRNPL-533` <chr>, #> #   `Ots_hnRNPL-533.1` <chr>, `Ots_HSP90B-100` <chr>, `Ots_HSP90B-100.1` <chr>, #> #   `Ots_IGF1-91` <chr>, `Ots_IGF1-91.1` <chr>, `Ots_IK1-328` <chr>, …"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"regional-baseline","dir":"Articles","previous_headings":"How to use Ms.GSI > Input data","what":"Regional baseline","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"regional baseline (Yukon) format. originally 380 loci Yukon River Chinook baseline, reduced numbers 177 demonstration.","code":"print(dplyr::as_tibble(base_yukon)) #> # A tibble: 5,435 × 358 #>    sample_type repunit   collection indiv `GTH2B-550` `GTH2B-550.1` NOD1  NOD1.1 #>    <chr>       <chr>     <chr>      <chr> <chr>       <chr>         <chr> <chr>  #>  1 reference   Lower Yu… KANDR02.K… KAND… G           G             C     C      #>  2 reference   Lower Yu… KANDR02.K… KAND… C           G             C     C      #>  3 reference   Lower Yu… KANDR02.K… KAND… G           G             C     C      #>  4 reference   Lower Yu… KANDR02.K… KAND… G           G             C     G      #>  5 reference   Lower Yu… KANDR02.K… KAND… C           G             C     C      #>  6 reference   Lower Yu… KANDR02.K… KAND… C           C             C     C      #>  7 reference   Lower Yu… KANDR02.K… KAND… C           G             G     G      #>  8 reference   Lower Yu… KANDR02.K… KAND… C           C             G     G      #>  9 reference   Lower Yu… KANDR02.K… KAND… C           C             G     G      #> 10 reference   Lower Yu… KANDR02.K… KAND… C           G             C     G      #> # ℹ 5,425 more rows #> # ℹ 350 more variables: `Ots_100884-287` <chr>, `Ots_100884-287.1` <chr>, #> #   `Ots_101554-407` <chr>, `Ots_101554-407.1` <chr>, `Ots_102414-395` <chr>, #> #   `Ots_102414-395.1` <chr>, `Ots_102867-609` <chr>, `Ots_102867-609.1` <chr>, #> #   `Ots_103041-52` <chr>, `Ots_103041-52.1` <chr>, `Ots_103122-180` <chr>, #> #   `Ots_103122-180.1` <chr>, `Ots_104048-194` <chr>, `Ots_104048-194.1` <chr>, #> #   `Ots_104063-132` <chr>, `Ots_104063-132.1` <chr>, `Ots_104415-88` <chr>, …"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"population-information","dir":"Articles","previous_headings":"How to use Ms.GSI > Input data","what":"Population information","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Another piece information needed population details baseline. need include three columns population information table. Column collection contains names population baseline. Column reunit specifies reporting group population belongs . Column grpvec specifies identification number reporting group. shows first ten rows population information Templin (broad-scale) baseline. hatchery populations mixture sample, can tell Ms.GSI either collection belongs natural hatchery-origin adding origin column population information table. origin column, identify collection \"wild\" \"hatchery\". don’t care separate natural hatchery origins, can lump one collection. case, don’t need add origin column. Also, option identify hatchery fish available broad-scale baseline, don’t add origin column population table regional baseline. Population information table Yukon (regional) baseline format, necessarily order. data files ready (recommend saving .Rdata .Rds files), can use prep_msgsi_data() function convert input data set model run. ’ll also need identify “groups interest” parameter sub-group. example, groups interests Lower Yukon, Middle Yukon Upper Yukon reporting groups. identify numbers 3, 4, 5 broad-scale baseline. ’s option save input data designated directory identifying location parameter file_path. prep_msgsi_data() function matches loci mixture baselines. want make sure didn’t miss locus baselines mixture, can manually provide loci names (string vector) baseline inputting loci1 loci2. example don’t manually provide lists loci trust mixture baselines correct loci. prep_msgsi_data() formats data files put list. took around ten seconds format input data case. Bigger data sets may take longer. first rows/items input data list:","code":"print(dplyr::as_tibble(templin_pops211)) #> # A tibble: 211 × 3 #>    collection       repunit             grpvec #>    <chr>            <chr>                <dbl> #>  1 KBIST98L         Russia                   1 #>  2 KBOLS02.KBOLS98E Russia                   1 #>  3 KKAMC97.KKAMC98L Russia                   1 #>  4 KPAKH02          Russia                   1 #>  5 KPILG05.KPILG06  Coastal West Alaska      2 #>  6 KUNAL05          Coastal West Alaska      2 #>  7 KGOLS05.KGOLS06  Coastal West Alaska      2 #>  8 KANDR02.KANDR03  Lower Yukon              3 #>  9 KANVI02          Lower Yukon              3 #> 10 KGISA01          Lower Yukon              3 #> # ℹ 201 more rows print(dplyr::as_tibble(yukon_pops50)) #> # A tibble: 50 × 3 #>    collection                          grpvec repunit      #>    <chr>                                <dbl> <chr>        #>  1 KANDR02.KANDR03                          1 Lower Yukon  #>  2 KANVI03.KANVI07                          1 Lower Yukon  #>  3 KNUL12SF                                 1 Lower Yukon  #>  4 KNUL12NF                                 1 Lower Yukon  #>  5 KGISA01                                  1 Lower Yukon  #>  6 KKATE02.KKATE12                          1 Lower Yukon  #>  7 KHENS01                                  2 Middle Yukon #>  8 KHENS07.KHENS15                          2 Middle Yukon #>  9 KSFKOY03                                 2 Middle Yukon #> 10 KMFKOY10.KMFKOY11.KMFKOY12.KMFKOY13      2 Middle Yukon #> # ℹ 40 more rows msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 14.43486 secs lapply(msgsi_dat, head) #> $x #> # A tibble: 6 × 74 #>   indiv    `GTH2B-550_1` `GTH2B-550_2` NOD1_1 NOD1_2 `Ots_2KER-137_1` #>   <chr>            <int>         <int>  <int>  <int>            <int> #> 1 fish_1               1             1      2      0                0 #> 2 fish_10              1             1      0      0                1 #> 3 fish_100             1             1      1      1                1 #> 4 fish_101             1             1      1      1                1 #> 5 fish_102             0             2      0      2                0 #> 6 fish_103             2             0      1      1                1 #> # ℹ 68 more variables: `Ots_2KER-137_2` <int>, `Ots_2KER-137_3` <int>, #> #   `Ots_AsnRS-72_1` <int>, `Ots_AsnRS-72_2` <int>, `Ots_AsnRS-72_3` <int>, #> #   Ots_ETIF1A_1 <int>, Ots_ETIF1A_2 <int>, `Ots_GPH-318_1` <int>, #> #   `Ots_GPH-318_2` <int>, `Ots_GST-207_1` <int>, `Ots_GST-207_2` <int>, #> #   `Ots_HSP90B-100_1` <int>, `Ots_HSP90B-100_2` <int>, `Ots_IGF1-91_1` <int>, #> #   `Ots_IGF1-91_2` <int>, `Ots_IGF1-91_3` <int>, `Ots_IK1-328_1` <int>, #> #   `Ots_IK1-328_2` <int>, `Ots_IK1-328_3` <int>, `Ots_LEI-292_1` <int>, … #>  #> $x2 #> # A tibble: 6 × 355 #>   indiv    `GTH2B-550_1` `GTH2B-550_2` NOD1_1 NOD1_2 `Ots_100884-287_1` #>   <chr>            <int>         <int>  <int>  <int>              <int> #> 1 fish_1               1             1      2      0                  2 #> 2 fish_10              1             1      0      0                  0 #> 3 fish_100             1             1      1      1                  1 #> 4 fish_101             1             1      1      1                  2 #> 5 fish_102             2             0      0      2                  1 #> 6 fish_103             0             2      1      1                  1 #> # ℹ 349 more variables: `Ots_100884-287_2` <int>, `Ots_101554-407_1` <int>, #> #   `Ots_101554-407_2` <int>, `Ots_102414-395_1` <int>, #> #   `Ots_102414-395_2` <int>, `Ots_102867-609_1` <int>, #> #   `Ots_102867-609_2` <int>, `Ots_103041-52_1` <int>, `Ots_103041-52_2` <int>, #> #   `Ots_103122-180_1` <int>, `Ots_103122-180_2` <int>, #> #   `Ots_104048-194_1` <int>, `Ots_104048-194_2` <int>, #> #   `Ots_104063-132_1` <int>, `Ots_104063-132_2` <int>, … #>  #> $y #> # A tibble: 6 × 76 #>   collection            repunit grpvec `GTH2B-550_1` `GTH2B-550_2` NOD1_1 NOD1_2 #>   <chr>                 <chr>    <dbl>         <int>         <int>  <int>  <int> #> 1 CHBIG92.KIBIG93.KBIG… Northe…      9           254            82    104    228 #> 2 CHCRY92.KICRY94.KCRY… Coasta…     10           306           302    120    488 #> 3 CHDMT92.KDEER94       Coasta…     10           178           116     77    217 #> 4 CHKAN92.KIKAN93.KKAN… Coasta…      2           341           147    281    199 #> 5 CHKOG92.KIKOG93.KKOG… Coasta…      2           205            91    191    105 #> 6 CHNUU92.KINUS93       Coasta…      2            85            27     73     41 #> # ℹ 69 more variables: `Ots_2KER-137_1` <int>, `Ots_2KER-137_2` <int>, #> #   `Ots_2KER-137_3` <int>, `Ots_AsnRS-72_1` <int>, `Ots_AsnRS-72_2` <int>, #> #   `Ots_AsnRS-72_3` <int>, Ots_ETIF1A_1 <int>, Ots_ETIF1A_2 <int>, #> #   `Ots_GPH-318_1` <int>, `Ots_GPH-318_2` <int>, `Ots_GST-207_1` <int>, #> #   `Ots_GST-207_2` <int>, `Ots_HSP90B-100_1` <int>, `Ots_HSP90B-100_2` <int>, #> #   `Ots_IGF1-91_1` <int>, `Ots_IGF1-91_2` <int>, `Ots_IGF1-91_3` <int>, #> #   `Ots_IK1-328_1` <int>, `Ots_IK1-328_2` <int>, `Ots_IK1-328_3` <int>, … #>  #> $y2 #> # A tibble: 6 × 357 #>   collection            grpvec repunit `GTH2B-550_1` `GTH2B-550_2` NOD1_1 NOD1_2 #>   <chr>                  <dbl> <chr>           <int>         <int>  <int>  <int> #> 1 CHSID92j                   3 Upper …             7           183    116     74 #> 2 K100MILECR16.K100MIL…      3 Upper …             7           103     78     34 #> 3 KANDR02.KANDR03            1 Lower …            78           230    208    100 #> 4 KANVI03.KANVI07            1 Lower …            62           164    131     79 #> 5 KBEAV97                    2 Middle…            40           148    152     38 #> 6 KBIGS87.KBIGS07            3 Upper …            30           258    231     65 #> # ℹ 350 more variables: `Ots_100884-287_1` <int>, `Ots_100884-287_2` <int>, #> #   `Ots_101554-407_1` <int>, `Ots_101554-407_2` <int>, #> #   `Ots_102414-395_1` <int>, `Ots_102414-395_2` <int>, #> #   `Ots_102867-609_1` <int>, `Ots_102867-609_2` <int>, #> #   `Ots_103041-52_1` <int>, `Ots_103041-52_2` <int>, `Ots_103122-180_1` <int>, #> #   `Ots_103122-180_2` <int>, `Ots_104048-194_1` <int>, #> #   `Ots_104048-194_2` <int>, `Ots_104063-132_1` <int>, … #>  #> $iden #> NULL #>  #> $nalleles #>    GTH2B-550         NOD1 Ots_2KER-137 Ots_AsnRS-72   Ots_ETIF1A  Ots_GPH-318  #>            2            2            3            3            2            2  #>  #> $nalleles2 #>      GTH2B-550           NOD1 Ots_100884-287 Ots_101554-407 Ots_102414-395  #>              2              2              2              2              2  #> Ots_102867-609  #>              2  #>  #> $groups #> [1]  9 10 10  2  2  2 #>  #> $p2_groups #> [1] 3 3 1 1 2 3 #>  #> $sub_group #> [1] 3 4 5 #>  #> $group_names_t1 #> [1] \"Russia\"                 \"Coastal West Alaska\"    \"Lower Yukon\"            #> [4] \"Middle Yukon\"           \"Upper Yukon\"            \"North Alaska Peninsula\" #>  #> $group_names_t2 #> [1] \"Lower Yukon\"  \"Middle Yukon\" \"Upper Yukon\"  #>  #> $wildpops #> [1] \"CHBIG92.KIBIG93.KBIGB04.KBIGB95\" \"CHCRY92.KICRY94.KCRYA05\"         #> [3] \"CHDMT92.KDEER94\"                 \"CHKAN92.KIKAN93.KKANE05\"         #> [5] \"CHKOG92.KIKOG93.KKOGR05\"         \"CHNUU92.KINUS93\"                 #>  #> $hatcheries #> NULL"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"genetic-stock-identification","dir":"Articles","previous_headings":"How to use Ms.GSI","what":"Genetic stock identification","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"input data set ready, can use msgsi_mdl() run model. used running rubias, Ms.GSI might feel bit slow. 1) running two GSI models tandem, takes twice long running single model, 2) Ms.GSI written solely R, computationally efficient language C. , code Ms.GSI C? ’re technically advanced like folks developed rubias package (.e., don’t know code C++). running time, recommend running integrated multistage model conditional GSI mode (default setting). option run model fully Bayesian mode one choose . run model fully Bayesian mode, option include numbers adaptation run. people think adaptation run encourages convergence fully Bayesian mode. test theory provide option want try . demonstrate model run one chains 150 iterations (first 50 warm-runs, burn-ins). run one chain example can pass CMD check building vignette document2. reality, definitely run multiple chains iterations. also options keep burn-ins set random seed reproducible results. don’t show example though (can always ?msgsi_mdl).","code":"msgsi_out <- msgsi_mdl(msgsi_dat, nreps = 150, nburn = 50, thin = 1, nchains = 1) #> Running model (and the category is... Labels!) #> Time difference of 2.833712 secs #> October-10-2023 23:38"},{"path":[]},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"stock-proportions","dir":"Articles","previous_headings":"How to use Ms.GSI > Summarizing results","what":"Stock proportions","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"output model contains eight items: summ_t1, trace_t1, summ_t2, trace_t2, summ_comb, trace_comb, iden_t1 idens_t2. Items “summ” summary reporting group proportions associated convergence diagnostics. want see summaries stage one two individually, summ_t1 summ_t2 show . people probably want see combined summary, summ_comb. column names self explanatory, others might need additional descriptions. ci.05 ci.95 lower upper bounds 90% credible interval. GR Gelman-Rubin statistic (.k.. \\(\\hat R\\)). example, Gelman-Rubin statistic calculated run one chain. n_eff effective size, \\(N_{eff}\\). discuss diagnose convergence document. Please consult Gelman et al. 2014, Gelman & Rubin 1992, Brooks & Gelman 1998 literature statistical methods. Items “trace” posterior sample history, trace history, either stage one, two, combined. Trace history needed making trace plots. need combine reporting groups proportions combine variance, trace histories need. trace_ items tibbles reporting group column. two additional columns, itr chain, identify Markov chain Monte Carlo (MCMC) sampling iteration chain.","code":"msgsi_out$summ_comb #> # A tibble: 12 × 8 #>    group                      mean  median      sd    ci.05   ci.95 GR     n_eff #>    <chr>                     <dbl>   <dbl>   <dbl>    <dbl>   <dbl> <lgl>  <dbl> #>  1 Russia                  3.77e-2 3.59e-2 0.0243  4.94e- 3 0.0765  NA      5.80 #>  2 Coastal West Alaska     2.99e-2 1.40e-3 0.0520  6.07e-14 0.150   NA      9.84 #>  3 North Alaska Peninsula  7.03e-3 1.07e-5 0.0160  2.83e-18 0.0486  NA     48.0  #>  4 Northwest Gulf of Alas… 3.04e-1 3.00e-1 0.0715  1.82e- 1 0.415   NA    100    #>  5 Copper                  1.12e-3 5.11e-7 0.00305 2.04e-20 0.00784 NA     11.2  #>  6 Northeast Gulf of Alas… 1.13e-3 1.59e-5 0.00249 9.02e-19 0.00712 NA    100    #>  7 Coastal Southeast Alas… 1.73e-3 3.48e-6 0.00469 2.01e-16 0.00752 NA      7.35 #>  8 British Columbia        5.51e-4 5.96e-6 0.00173 6.93e-17 0.00312 NA     31.8  #>  9 WA/OR/CA                4.11e-4 1.07e-6 0.00146 1.97e-21 0.00233 NA    100    #> 10 Lower Yukon             3.63e-1 3.57e-1 0.0808  2.38e- 1 0.510   NA     72.8  #> 11 Middle Yukon            6.76e-2 6.74e-2 0.0222  2.90e- 2 0.107   NA    100    #> 12 Upper Yukon             1.86e-1 1.89e-1 0.0388  1.24e- 1 0.248   NA    100 msgsi_out$trace_comb #> # A tibble: 100 × 14 #>    Russia `Coastal West Alaska` `North Alaska Peninsula` Northwest Gulf of Ala…¹ #>     <dbl>                 <dbl>                    <dbl>                   <dbl> #>  1 0.0533              6.29e- 5                 8.65e- 4                   0.280 #>  2 0.0427              6.90e-23                 1.05e- 2                   0.297 #>  3 0.0677              3.71e- 5                 2.12e- 2                   0.306 #>  4 0.0509              3.58e- 9                 2.39e- 2                   0.294 #>  5 0.0266              2.83e-16                 1.67e- 2                   0.299 #>  6 0.0122              6.31e-14                 2.15e- 2                   0.394 #>  7 0.0545              4.46e- 3                 8.99e- 3                   0.270 #>  8 0.102               2.59e- 2                 7.50e- 3                   0.306 #>  9 0.0531              5.20e- 2                 6.81e- 7                   0.322 #> 10 0.0468              6.17e- 2                 1.08e-13                   0.330 #> # ℹ 90 more rows #> # ℹ abbreviated name: ¹​`Northwest Gulf of Alaska` #> # ℹ 10 more variables: Copper <dbl>, `Northeast Gulf of Alaska` <dbl>, #> #   `Coastal Southeast Alaska` <dbl>, `British Columbia` <dbl>, #> #   `WA/OR/CA` <dbl>, `Lower Yukon` <dbl>, `Middle Yukon` <dbl>, #> #   `Upper Yukon` <dbl>, itr <dbl>, chain <dbl>"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"individual-assignments","dir":"Articles","previous_headings":"How to use Ms.GSI > Summarizing results","what":"Individual assignments","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"last two items output identity assignment history individual mixture sample. column represents individual mixture, row records identity assigned iteration chain. numbers population identifiers order population information files (baseline files). Individuals ordered input data (.e., mixture data). Individual identity output format may useful users. , Ms.GSI function indiv_assign() summarize reporting group assignment probabilities individual mixture. summary individual assignment column named ID identifies individual mixture. regional column shows probability individual belong group interest, , within region focus. rest columns probabilities regional reporting groups. Probabilities row sum one.","code":"msgsi_out$idens_t1 #> # A tibble: 100 × 150 #>       V1    V2    V3    V4    V5    V6    V7    V8    V9   V10   V11   V12   V13 #>    <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> #>  1    11    11    11    31    31    11    31    11    31    11    11   197    11 #>  2    11    11    25    11    31    11   210    31    11    31    11   150    31 #>  3    11   157    25    31    31    96    11    31    11    11    11    31    11 #>  4    11    11    25    11    31    11   210    31    11    11     2    31    11 #>  5    11    11    25    31    31    11    31    31    11    31    11    11    11 #>  6    11    11    11    31    31    11    11    31    31    11    11    31    31 #>  7    11    36    25    31    31    11    31    31    11    11    11    31    11 #>  8    11    31    31    31   197    11    31    31    11   140    17    31   157 #>  9    31    36    25    31    31    11    31    11    31    31   115    11    31 #> 10   116   197    25    31    31    11    31    31    11    31    17    31    31 #> # ℹ 90 more rows #> # ℹ 137 more variables: V14 <int>, V15 <int>, V16 <int>, V17 <int>, V18 <int>, #> #   V19 <int>, V20 <int>, V21 <int>, V22 <int>, V23 <int>, V24 <int>, #> #   V25 <int>, V26 <int>, V27 <int>, V28 <int>, V29 <int>, V30 <int>, #> #   V31 <int>, V32 <int>, V33 <int>, V34 <int>, V35 <int>, V36 <int>, #> #   V37 <int>, V38 <int>, V39 <int>, V40 <int>, V41 <int>, V42 <int>, #> #   V43 <int>, V44 <int>, V45 <int>, V46 <int>, V47 <int>, V48 <int>, … indiv_assign(mdl_out = msgsi_out, mdl_dat = msgsi_dat) #> # A tibble: 150 × 5 #>    ID       `Not regional` `Lower Yukon` `Middle Yukon` `Upper Yukon` #>  * <chr>             <dbl>         <dbl>          <dbl>         <dbl> #>  1 fish_1             0.37          0.63              0             0 #>  2 fish_10            0.33          0.67              0             0 #>  3 fish_100           0.72          0.28              0             0 #>  4 fish_101           0.7           0.3               0             0 #>  5 fish_102           0.82          0.18              0             0 #>  6 fish_103           0.15          0.85              0             0 #>  7 fish_104           0.49          0.51              0             0 #>  8 fish_105           0.89          0.11              0             0 #>  9 fish_106           0.45          0.55              0             0 #> 10 fish_107           0.37          0.63              0             0 #> # ℹ 140 more rows"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"trace-plot","dir":"Articles","previous_headings":"How to use Ms.GSI > Summarizing results","what":"Trace plot","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Ms.GSI function make trace plot examine mixing MCMC chains. Trace plots reporting group proportions. \\[\\newcommand{\\mx}[1]{\\mathbf{#1}}\\]","code":"tr_plot(obj = msgsi_out$trace_comb)"},{"path":[]},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"pella-masuda-model","dir":"Articles","previous_headings":"Methods (math!)","what":"Pella-Masuda Model","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"integrated multistage GSI model essentially two Bayesian GSI models stacked top ; hence name “multistage.” Pella-Masuda model (Pella & Masuda 2001) Bayesian GSI model make stage integrated multistage model. first describe Pella-Masuda model discussing development integrated multistage model. group mixed populations, Pella-Masuda model assigns population identities individual based genetic make-(e.g. genotype). model estimates overall population proportions based numbers individuals assigned population. fishery context, genetic data individuals called mixture sample consists multi-locus genotype individual fish collected mixed-stock fishery. \\(\\mx x\\) denotes mixture sample. document, bold-font letter represents number set, collection distinct elements. example, \\(\\mx x\\) set contains individual \\(x\\) elements. \\(x_{m,l,j}\\) count allele \\(j\\) locus \\(l\\) individual fish \\(m\\), \\(m \\\\{1,2,...,M\\}\\), \\(l \\\\{1,2,...,L\\}\\), \\(j \\\\{1,2,...,J_l\\}\\) depends locus \\(l\\). Genetic data populations called baseline sample consists genotype compositions various baseline populations collected spawning locations. Researchers select sampling locations best represent populations area. \\(\\mx y\\) denotes baseline sample. \\(y_{k,l,j}\\) count allele \\(j\\) locus \\(l\\) sample size \\(n_{k,l}\\) collected baseline population \\(k\\), \\(k \\\\{1,2,...,K\\}\\). mixture baseline samples, assumed allele counts locus follow multinomial distribution3. Using another made-example, baseline sample, two allele types locus 1 population 2. Counts two alleles \\(y_{1,2,1}, y_{1,2,2}\\), follow multinomial distribution parameters \\(q_{1,2,1}, q_{1,2,2}\\) size \\(n_{2,1}\\). Note \\(q_{1,2,1}, q_{1,2,2}\\) relative frequencies two alleles locus 1 population 2. Bayesian framework, need specify prior distributions parameters; therefore, place Dirichlet4 prior distribution \\(q_{1,2,1}, q_{1,2,2}\\) hyperparameters5 \\(\\beta_{1,1}, \\beta_{1,2}\\). Usually set priors equal loci. example, let \\(\\beta_{1,1} = \\beta_{1,2} = 1/2\\) based number alleles locus 1. \\(\\mx q\\) represents \\(q_{1,2,1}\\) \\(q_{1,2,2}\\), together allele frequencies loci populations. can see, \\(\\mx q\\) \\(\\mx y\\) dimension relative frequency corresponds allele count. model, allele frequencies baseline populations, \\(\\mx q\\), determine population proportions. population proportions determines identities individual fish. Individual identities tallied summarized update baseline allele frequencies. \\(\\mx y\\) can expressed follows: \\(\\mx y_k \\sim Mult(\\mx n_k, \\mx q_k)\\) Prior distribution \\(\\mx q\\): \\(\\mx q_k \\sim Dirich(\\mx \\beta)\\), \\(\\mx \\beta = 1/J_l\\) mixture sample, allele counts locus individual fish also follows multinomial distributions. fish came certain population, distribution allele counts resemble allele frequencies baseline population came . However, identity individual fish unknown needs estimated. let \\(\\mx z_m\\) represent population identify \\(m\\)th mixture individual. \\(\\mx z_m\\) composed 0’s 1 length \\(K\\) (e.g. number baseline populations). \\(z_{m,k} = 1\\) individual \\(m\\) belongs population \\(k\\), \\(z_{m,k} = 0\\) otherwise. made-example, \\(\\mx z_{100} = \\{0, 0, 1, 0, 0\\}\\) means five baseline populations, individual fish #100 comes population 3. place multinomial prior \\(z_{m,1}, z_{m,2}, ..., z_{m,K}\\) size 1 probabilities equal population proportions \\(p_1, p_2, ..., p_K\\). specify Dirichlet prior distribution \\(p_1, p_2, ..., p_K\\) hyperparameters \\(\\alpha_1, \\alpha_2, ..., \\alpha_K\\), \\(\\alpha_1 = \\alpha_2 = ... = \\alpha_K = 1/K\\). usually set \\(\\alpha\\) equal reporting groups, can set based prior knowledge population proportions. express \\(\\mx z\\) follows: \\(\\mx z_m \\sim Mult(\\mx 1, \\mx p)\\) Prior distribution \\(\\mx p\\): \\(\\mx p \\sim Dirich(\\mx \\alpha)\\), \\(\\mx \\alpha = 1/K\\) mentioned, mixture sample, allele counts locus individual fish follows multinomial distributions. parameters allele frequencies corresponding baseline population size numbers ploidy respective locus. Remember population identity \\(z_{m,k} = 1\\) individual \\(m\\) belongs population \\(k\\), \\(z_{m,k} = 0\\) otherwise. multiplying population identities, \\(z_{m,1}, z_{m,2}, ..., z_{m,K}\\), allele frequencies baseline populations, \\(\\mx q_1, \\mx q_2, ..., \\mx q_K\\), allele frequencies baseline population individual \\(m\\) belong remain rest goes zero. \\(\\mx x\\) expressed . \\(\\mx{ploidy} = ploidy_1, ploidy_2, ..., ploidy_L\\) denotes ploidy locus. \\(\\mx x_m \\sim Mult(\\mx{ploidy}, \\mx z_m \\cdot \\mx q)\\) Moran Anderson (2018) implement genetic mixture analysis R package, rubias. program widely used researchers around world, including GCL. rubias utilizes model structure called conditional genetic stock identification model, conditional GSI model, modified Pella-Masuda model. main difference two models , conditional model, \\(\\mx q\\) integrated distribution mixture sample, \\(\\mx x_m\\). , baseline allele frequencies updated model. result , \\(\\mx x_m\\) takes form compound Dirichlet-multinomial distribution (Johnson el. 1997): \\(\\mx x_m \\sim CDM(\\mx{ploidy}, \\mx z_m \\cdot \\mx v)\\), \\(\\mx v\\) \\(\\mx \\beta + \\mx y\\). going attempt proving theory behind conditional model document (details can found Moran & Anderson 2018). since \\(\\mx q\\) integrated \\(\\mx x_m\\), process estimating parameters simpler streamlined. implemented conditional GSI stage integrated multistage model.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"extend-to-multistage","dir":"Articles","previous_headings":"Methods (math!)","what":"Extend to multistage","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"integrated multistage framework, stage consists single baseline Pella-Masuda model. two models connected fish assigned regional group second stage conditional based whether fish assigned reporting group regional baseline first stage. following describes conditional relationship broad-scale regional baselines, use \\((b)\\) \\((r)\\) denote broad-scale regional stages, respectively: \\(\\mathbf z^{(r)}_m | \\mathbf z^{(b)}_m, \\mathbf \\zeta = \\begin{cases} \\mathbf z^{(r)}_m & \\text{} \\sum (\\mathbf z^{(b)}_m \\cdot \\mathbf \\zeta) = 1\\\\ \\mathbf 0 & \\text{otherwise} \\end{cases}\\). \\(\\mathbf z^{(r)}_m\\) vectors indicators (\\(0\\) \\(1\\)) identifying regional population individual \\(m\\) belongs . \\(\\mathbf \\zeta\\) indicators correspond broad-scale populations \\(= 1\\) corresponding broad-scale population geographically overlaps regional reporting groups. \\(\\sum (\\mathbf z^{(b)}_m \\cdot \\mathbf \\zeta) = 1\\) individual \\(m\\) belongs reporting group within regional baseline \\(0\\) otherwise. \\(\\mathbf z^{(b)}_m\\) multinomial distribution, \\(\\mathbf z^{(b)}_m \\sim Mult(1, \\mathbf \\pi_m)\\), \\(\\mathbf \\pi_m\\) vectors probabilities individual \\(m\\) assigned broad-scale reporting group. prior distribution \\(\\mathbf \\pi_m\\) \\(Dirich(1/K^{(b)})\\), \\(K^{(b)}\\) number reporting groups broad-scale baseline. \\(\\mathbf z^{(r)}_m\\) also multinomial distribution, \\(\\mathbf z^{(r)}_m \\sim Mult(1, \\mathbf \\rho_m)\\), \\(\\mathbf \\rho_m\\) vectors probabilities individual \\(m\\) assigned regional reporting group. prior distribution \\(\\mathbf \\rho_m\\) \\(Dirich(1/K^{(r)})\\), \\(K^{(r)}\\) number reporting groups regional baseline. analysis, two Pella-Masuda models proceed tandem, baseline maker suite individuals mixture.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"gibbs-sampler-where-the-fun-go-round-and-round","dir":"Articles","previous_headings":"Methods (math!)","what":"Gibbs Sampler: where the fun go round and round","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Deriving values parameters stage integrated multistage model requires finding joint posterior distribution Pella-Masuda model stage, \\(\\mx p, \\mx q,\\mx z, \\mx y, \\mx\\alpha, \\mx\\beta\\). section, introduce concepts algorithm sample posterior distribution single baseline Pella-Masuda model, can extend integrated multistage framework. Gibbs sampler type MCMC methods sequentially sample parameter values Markov chain. enough sampling, Markov chain eventually converge desire distribution interest. appealing quality Gibbs sampler reduction multivariate problem (Pella-Masuda model) series manageable lower-dimensional problems. full description Gibbs sampler MCMC methods beyond scope document; however, information can found numerous resources devoting Bayesian data analysis (see Carlin & Louis 2009; Robert & Casella 2010; Gelman et al. 2014) illustrate, suppose like determine joint posterior distribution interest, \\(p(\\mx \\theta|\\mx y)\\), \\(\\mx \\theta = \\{\\theta_1, \\theta_2,..., \\theta_K\\}\\). likely multivariate \\(p(\\mx \\theta|\\mx y)\\) complicated sample . However, can figure break joint posterior distribution individual full conditional distributions, parameter \\(\\mx \\theta\\) can sampled one one sequentially using Gibbs sampler algorithm. process begins arbitrary set starting values \\(\\theta^{(0)}_2, \\theta^{(0)}_3,..., \\theta^{(0)}_K\\) proceeds follows: \\(t = 1,2,...,T\\), repeat Draw \\(\\theta^{(t)}_1\\) \\(p(\\theta_1|\\theta^{(t-1)}_2, \\theta^{(t-1)}_3,..., \\theta^{(t-1)}_k, \\mx y)\\) Draw \\(\\theta^{(t)}_2\\) \\(p(\\theta_2|\\theta^{(t)}_1, \\theta^{(t-1)}_3,..., \\theta^{(t-1)}_k, \\mx y)\\) ⋮ Draw \\(\\theta^{(t)}_k\\) \\(p(\\theta_k|\\theta^{(t)}_1, \\theta^{(t)}_2,..., \\theta^{(t)}_{k-1}, \\mx y)\\) work best full conditionals known distributions can easily sample (although ’s required). case Pella-Masuda model, rely two main concepts, Bayes theorem conjugacy, trick. Briefly, estimating parameters \\(\\mx\\theta\\) data \\(\\mx D\\), according Bayes Rule, \\(p(\\mx\\theta|\\mx D) = \\displaystyle \\frac{p(\\mx D|\\mx\\theta)p(\\mx\\theta)}{p(\\mx D)}\\). \\(p(\\mx\\theta|\\mx D)\\) joint posterior distribution parameters \\(\\mx\\theta\\), \\(p(\\mx D|\\mx\\theta)\\) likelihood observing data given parameters, \\(p(\\mx\\theta)\\) prior distribution parameters, \\(p(\\mx D)\\) constant marginal distribution data. \\(p(\\mx D)\\) often mathematically difficult obtain; however, \\(p(\\mx D)\\) constant number, can ignore reducing posterior distribution \\(p(\\mx\\theta|\\mx D) \\propto p(\\mx D|\\mx\\theta)p(\\mx\\theta)\\). , Bayes Rule help us estimating parameters Pella-Masuda model? First, joint posterior distribution split smaller pieces. , separate joint posterior likelihood data priors parameters: \\(p(\\mx p, \\mx q, \\mx z, \\mx y, \\mx\\alpha, \\mx\\beta)\\) \\(\\propto p(\\mx x|\\mx z, \\mx q) p(\\mx y|\\mx q) \\cdot p(\\mx p|\\mx\\alpha) p(\\mx q|\\mx\\beta) p(\\mx z|\\mx p)\\) re-arrangements hand-waving, arrive marginal posterior distributions \\(\\mx q\\) \\(\\mx p\\): \\(p(\\mx x|\\mx z, \\mx q) p(\\mx y|\\mx q) \\cdot p(\\mx p|\\mx\\alpha) p(\\mx q|\\mx\\beta) p(\\mx z|\\mx p)\\) \\(= p(\\mx x|\\mx z, \\mx q) p(\\mx y|\\mx q) p(\\mx q|\\mx\\beta) \\cdot p(\\mx z|\\mx p) p(\\mx p|\\mx\\alpha)\\) \\(\\propto p(\\mx x,\\mx y,\\mx z|\\mx q) p(\\mx q|\\mx\\beta) \\cdot p(\\mx z|\\mx p) p(\\mx p|\\mx\\alpha)\\) \\(\\propto p(\\mx q|\\mx x,\\mx y,\\mx z,\\mx\\beta) \\cdot p(\\mx p|\\mx z,\\mx\\alpha)\\) Next, take advantage mathematical property called conjugacy help us determine marginal posterior distributions. Based property, posterior distribution follows parametric form prior distribution prior conjugate family likelihood. example, likelihood data binomial distribution prior parameter beta distribution, posterior also beta distribution beta conjugate family binomial. many conjugate families, Dirichlet multinomial another example. Utilizing conjugacy property, determine marginal posterior distributions \\(\\mx q\\) \\(\\mx p\\).","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"marginal-posterior-pqx-y-z-beta","dir":"Articles","previous_headings":"Methods (math!) > Gibbs Sampler: where the fun go round and round","what":"Marginal Posterior p(q|x, y, z, \\(\\beta\\))","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"determine posterior \\(p(\\mx q|\\mx x,\\mx y,\\mx z,\\mx\\beta)\\) Dirichlet-distributed Dirichlet prior \\(p(\\mx q|\\mx\\beta)\\) conjugate family multinomial likelihoods \\(p(\\mx x|\\mx z, \\mx q)\\) \\(p(\\mx y|\\mx q)\\). determine exact parameterization posterior distribution, need derive prior likelihoods first. Likelihood \\(p(\\mx x|\\mx z, \\mx q)\\) can derived two steps. first step conditioned likelihood \\(\\mx z\\) \\(p(\\mx x|\\mx z, \\mx q) \\propto \\displaystyle \\prod^{M}_{m=1} \\prod^{K}_{k=1} [f(\\mx x_m|\\mx q_k)]^{z_{m,k}}\\), \\(f(\\mx x_m|\\mx q_k)\\) relative frequency multi-locus genotype individual \\(m\\) population \\(k\\). next step, derive \\(f(\\mx x_m|\\mx q_k)\\): \\(f(\\mx x_m|\\mx q_k) \\propto \\displaystyle \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{x_{m,l,j}}_{k,l,j}\\) combine two, \\(p(\\mx x|\\mx z, \\mx q) \\propto \\displaystyle \\prod^{M}_{m=1} \\prod^{K}_{k=1} [f(\\mx x_m|\\mx q_k)]^{z_{m,k}}\\) \\(\\propto \\displaystyle \\prod^{M}_{m=1} \\prod^{K}_{k=1} [\\displaystyle \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{x_{m,l,j} \\cdot z_{m,k}}_{k,l,j}]\\) \\(\\propto \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\sum^{M}_{m=1} (x_{m,l,j} \\cdot z_{m,k})}_{k,l,j}\\) Deriving likelihood \\(p(\\mx y|\\mx q)\\) straightforward. product relative frequency multi-locus genotype population: \\(p(\\mx y|\\mx q) \\propto \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{y_{k,l,j}}_{k,l,j}\\) \\(p(q|\\mx\\beta)\\) Dirichlet prior distribution. probability density kernel6 \\(\\mx q^{\\mx \\beta - 1}\\). can express likelihood \\(p(\\mx q|\\mx\\beta) \\propto \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\beta_{l,j} - 1}_{k,l,j}\\). Put likelihoods together, \\(p(\\mx q|\\mx x,\\mx y,\\mx z,\\mx\\beta) \\propto p(\\mx x|\\mx z, \\mx q) p(\\mx y|\\mx q) p(\\mx q|\\mx\\beta)\\) \\(\\propto \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\sum^{M}_{m=1} (x_{m,l,j} \\cdot z_{m,k})}_{k,l,j} \\cdot \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{y_{k,l,j}}_{k,l,j} \\cdot \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\beta_{l,j} - 1}_{k,l,j}\\) \\(= \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\sum^{M}_{m=1} (x_{m,l,j} \\cdot z_{m,k}) + y_{k,l,j} + \\beta_{l,j} - 1}_{k,l,j}\\) elementary anybody recognize \\(\\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\sum^{M}_{m=1} (x_{m,l,j} \\cdot z_{m,k}) + y_{k,l,j} + \\beta_{l,j} - 1}_{k,l,j}\\) kernel Dirichlet distribution. Hence, \\(\\mx q_{k,l}|\\mx x,\\mx y,\\mx z,\\mx\\beta \\sim Dirich(\\displaystyle \\sum^{M}_{m=1} x_{m,l,j} z_{m,k} + y_{k,l,j} + \\beta_{l,j})\\)","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"marginal-posterior-ppz-alpha","dir":"Articles","previous_headings":"Methods (math!) > Gibbs Sampler: where the fun go round and round","what":"Marginal Posterior p(p|z, \\(\\alpha\\))","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Using logic previously, \\(p(\\mx p|\\mx z,\\mx\\alpha)\\) also Dirichlet-distributed due Dirichlet prior \\(p(\\mx p|\\mx\\alpha)\\) multinomial likelihood \\(p(\\mx z|\\mx p)\\). \\(p(\\mx p|\\mx z,\\mx\\alpha) \\propto p(\\mx z|\\mx p) p(\\mx p|\\mx\\alpha)\\) \\(\\propto \\displaystyle \\prod^{M}_{m=1} \\prod^{K}_{k=1} p^{z_{m,k}}_k \\cdot \\prod^{K}_{k=1} p^{\\alpha_k - 1}_k\\) \\(\\propto \\displaystyle \\prod^{K}_{k=1} p^{\\sum^M_{m=1}z_{m,k} + \\alpha_k - 1}_k\\) , recognize kernel Dirichlet distribution: \\(\\mx p|\\mx z,\\mx\\alpha \\sim Dirich(\\displaystyle \\sum^M_{m=1}z_{m,k} + \\alpha_k)\\)","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"algorithm","dir":"Articles","previous_headings":"Methods (math!) > Gibbs Sampler: where the fun go round and round","what":"Algorithm","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"one distribution figure can start Gibbs sampler routine (thought ’re set, lol). need know sample \\(\\mx z_m|\\mx p, \\mx q, \\mx x_m\\), population identity individual fish \\(m\\) (components 1 2) given population proportions genotype. probability fish \\(m\\) belong population \\(k\\) \\(p_k\\), likelihood observing relative frequency genotype fish \\(m\\) population \\(k\\) \\(f(\\mx x_m|\\mx q_k)\\), probability fish \\(m\\) belong population \\(k\\) given population proportions genotype \\(\\displaystyle \\frac{p_k \\cdot f(\\mx x_m|\\mx q_k)}{\\sum^K_{k'=1}p_{k'} \\cdot f(\\mx x_m|\\mx q_{k'})}\\). denominator sum one, need calculate numerator. \\(\\mx z_m|\\mx p, \\mx q, \\mx x_m\\) following distribution: \\(\\mx z_m|\\mx p, \\mx q, \\mx x_m \\sim Mult(1, \\mx{p'}_m)\\), \\(p'_{m,k} = p_k \\cdot f(\\mx x_m|\\mx q_k)\\). draw initial values \\(\\mx q_k\\) based prior distribution. figured pieces Gibbs sampler single baseline framework, can extend concept multistage framework. Conceptually, use Gibbs sampler sample marginal posteriors \\(\\mx q^{(b)}\\), \\(\\mx p^{(b)}\\), \\(\\mx z^{(b)}\\), \\(\\mx q^{(r)}\\), \\(\\mx p^{(r)}\\), \\(\\mx z^{(r)}\\). marginal posteriors multistage framework stay counterparts single baseline framework except \\(\\mx p^{(r)}\\), conditioned identity assignments broad-scale stage: \\(\\mx p^{(r)} | \\mx z^{(r)}, \\mx z^{(b)}, \\mx \\zeta, \\mx \\alpha^{(r)} \\sim Dirich(\\displaystyle \\sum^M_{m=1} (z^{(r)}_{m,k^{(r)}} | z^{(b)}_{m,k^{(b)}}, \\zeta_{m,k^{(b)}}) + \\alpha^{(r)}_{k^{(r)}})\\), initiate Gibbs sampler starting values \\(\\mathbf p^{(b)(0)}\\), \\(\\mathbf q^{(b)(0)}\\), \\(\\mathbf p^{(r)(0)}\\) \\(\\mathbf q^{(r)(0)}\\) based prior distributions. use \\((t)\\) denote \\(t\\)th iteration Gibbs sampler. Sampling fully Bayesian model proceeds follows: \\(t = 1,2,...,T\\), repeat Determine population identities mixture individuals first stage, \\(\\mx z^{(broad)(t)}_m|\\mx p^{(broad)(t-1)}, \\mx q^{(broad)(t-1)}, \\mx x_m \\sim Mult(1, \\mx{p'}^{(broad)}_m)\\). Determine population identities mixture individuals second stage, \\(\\mx z^{(regional)(t)}_m|z^{(broad)(t)}_m, \\mx p^{(regional)(t-1)}, \\mx q^{(regional)(t-1)}, \\mx x_m \\sim Mult(1, \\mx{p'}^{(regional)}_m)\\). Draw marginal posterior distributions \\(\\mx q^{(broad)(t)}\\), \\(\\mx p^{(broad)(t)}\\), \\(\\mx q^{(regional)(t)}\\) \\(\\mx p^{(regional)(t)}\\) \\(p(\\mx q^{(broad)}|\\mx x,\\mx y^{(broad)},\\mx z^{(broad)(t)},\\mx\\beta^{(broad)})\\), \\(p(\\mx p^{(broad)}|\\mx z^{(broad)(t)},\\mx\\alpha^{(broad)})\\), \\(p(\\mx q^{(regional)}|\\mx x,\\mx y^{(regional)},\\mx z^{(regional)(t)},\\mx\\beta^{(regional)})\\) \\(p(\\mx p^{(regional)}|\\mx z^{(regional)(t)},\\mx\\alpha^{(regional)})\\) respectively. Determine population identities mixture individuals braod-scale stage, \\((\\mathbf z^{(t)}_m | \\mathbf p^{(t-1)}, \\mathbf q^{(t-1)}, \\mathbf x_m)^{(b)} \\sim Mult(1, \\mathbf{p'}_m)^{(b)}\\). Determine population identities mixture individuals regional stage, \\((\\mathbf z^{(t)}_m | \\mathbf p^{(t-1)}, \\mathbf q^{(t-1)}, \\mathbf x_m)^{(r)} \\sim Mult(1, \\mathbf{p'}_m)^{(r)}\\). Draw marginal posterior distributions \\(\\mathbf q^{(b)(t)}\\), \\(\\mathbf p^{(b)(t)}\\), \\(\\mathbf q^{(r)(t)}\\) \\(\\mathbf p^{(r)(t)}\\) \\(p(\\mathbf q | \\mathbf x, \\mathbf y, \\mathbf z^{(t)}, \\mathbf \\beta)^{(b)}\\), \\(p(\\mathbf p | \\mathbf z^{(t)}, \\mathbf \\alpha)^{(b)}\\), \\(p(\\mathbf q | \\mathbf x, \\mathbf y, \\mathbf z^{(t)}, \\mathbf \\beta)^{(r)}\\) \\(p(\\mathbf p^{(r)} | \\mathbf z^{(r)}, \\mathbf z^{(b)}, \\mathbf \\zeta, \\mathbf \\alpha^{(r)})\\) respectively. Noted marginal posteriors \\(\\mathbf p^{(b)}\\) \\(\\mathbf p^{(r)}\\) population proportions broad-scale regional baselines. \\(T\\) large enough ensure sampler chain converges desire distribution. Usually takes thousands iterations. Implementing conditional GSI model requires slight modification algorithm. \\(\\mx q^{(b)}\\) \\(\\mx q^{(r)}\\) need calculated initial step without updates, otherwise procedures remain .","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Brooks, S. P., . Gelman. 1998. General methods monitoring convergence iterative simulations. Journal Computational Graphical Statistics. 7:434–455. Carlin, B. T. Louis. 2009. Bayesian Methods Data Analysis, 3rd Edition. CRC Press. New York. Gelman, ., D. B. Rubin. 1992. Inference iterative simulation using multiple sequences. Statistical Science. 7:457–472. Gelman, ., J. Carlin, H. Stern, D. Dunson, . Vehtari D. Rubin. 2014. Bayesian Data Analysis, 3rd Edition. CRC Press. New York. Johnson, N.L., Kotz, S., Balakrishnan, N. 1997. Discrete multivariate distributions. Wiley & Sons, New York. Lee. E., T. Dann, H. Hoyt. 2021. Yukon River Chinook Genetic Baseline Improvements. Yukon River Panel Restoration Enhancement Fund Final Report, URE-163-19N. Moran, B.M. E.C. Anderson. 2018. Bayesian inference conditional genetic stock identification model. Canadian Journal Fisheries Aquatic Sciences. 76(4):551-560. https://doi.org/10.1139/cjfas-2018-0016 Pella, J. M. Masuda. 2001. Bayesian methods analysis stock mixtures genetic characters. Fish. Bull. 99:151–167. Robert, C. G. Casella. 2010. Introducing Monte Carlo Methods R. Springer. New York. Templin, W. D., J. E. Seeb, J. R. Jasper, . W. Barclay, L. W. Seeb. 2011. Genetic differentiation Alaska Chinook salmon: missing link migratory studies. Mol Ecol Resour. 11(Suppl 1):226-246. doi:10.1111/j.1755-0998.2010.02968.x.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bobby Hsu. Author, maintainer. Alaska Dept. Fish & Game. Copyright holder.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hsu B (2023). Ms.GSI: Multistage Genetic Stock Identification. https://github.com/boppingshoe/Ms.GSI, https://boppingshoe.github.io/Ms.GSI/.","code":"@Manual{,   title = {Ms.GSI: Multistage Genetic Stock Identification},   author = {Bobby Hsu},   year = {2023},   note = {https://github.com/boppingshoe/Ms.GSI, https://boppingshoe.github.io/Ms.GSI/}, }"},{"path":"https://boppingshoe.github.io/Ms.GSI/index.html","id":"msgsi-","dir":"","previous_headings":"","what":"Multistage Genetic Stock Identification","title":"Multistage Genetic Stock Identification","text":"Ms.GSI help conducting multistage genetic stock identification. package includes functions setup input data, run multistage model, make summary statistics convergence diagnostics. also includes function making trace plots.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multistage Genetic Stock Identification","text":"can install development version Ms.GSI GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"boppingshoe/Ms.GSI\", build_vignettes = TRUE)"},{"path":"https://boppingshoe.github.io/Ms.GSI/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Multistage Genetic Stock Identification","text":"example shows basic workflows running multistage model. First thing first, background: made scenario samples Chinook salmon bycatch Bering Sea groundfish fisheries. mixture sample contains Chinook North Pacific, interested contribution Yukon River. conduct GSI using broad-scale baseline (base_templin) combination regional baseline (base_yukon) multistage framework. fake Chinook data sets pre-loaded Ms.GSI package. prepare input data: Using prepared input data, run model four chains 150 iterations. reality, course run iterations. set first 50 iterations chain warm-ups (kept final output). ’s summary estimates convergence diagnostics. ’s function package make trace plots inspect mixing chains.  Details mathematical model integrated multistage framework instructions using Ms.GSI package can found “articles” tab package website. , installed Ms.GSI, can call article using vignette(\"msgsi_vignette\").","code":"library(Ms.GSI)  msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 9.442187 secs msgsi_out <- msgsi_mdl(msgsi_dat, nreps = 150, nburn = 50, thin = 1, nchains = 4) #> Running model (and the category is... Snow Ball!) #> Time difference of 23.62524 secs #> June-09-2023 13:14  msgsi_out$summ_comb #> # A tibble: 12 × 8 #>    group                       mean  median      sd    ci.05   ci.95    GR n_eff #>    <chr>                      <dbl>   <dbl>   <dbl>    <dbl>   <dbl> <dbl> <dbl> #>  1 Russia                   2.90e-2 2.63e-2 0.0212  7.31e- 5 0.0702   1.13  92.8 #>  2 Coastal West Alaska      1.34e-1 1.05e-1 0.135   1.23e-12 0.352    3.31  43.1 #>  3 North Alaska Peninsula   1.95e-2 5.95e-3 0.0256  2.27e-13 0.0712   1.49  44.6 #>  4 Northwest Gulf of Alaska 3.56e-1 3.54e-1 0.0792  2.12e- 1 0.480    1.35  89.6 #>  5 Copper                   1.15e-3 2.53e-6 0.00330 6.33e-19 0.00686  1.05 272.  #>  6 Northeast Gulf of Alaska 8.12e-4 1.31e-6 0.00352 1.41e-20 0.00308  1.14 213.  #>  7 Coastal Southeast Alaska 2.17e-3 1.71e-5 0.00519 2.33e-15 0.0122   1.08 162.  #>  8 British Columbia         7.01e-4 1.46e-6 0.00203 6.21e-19 0.00481  1.01 355.  #>  9 WA/OR/CA                 6.22e-4 8.87e-7 0.00211 7.36e-18 0.00310  1.03 349.  #> 10 Lower Yukon              2.07e-1 2.17e-1 0.148   2.14e- 2 0.423    3.67 176.  #> 11 Middle Yukon             7.01e-2 6.68e-2 0.0224  3.93e- 2 0.111    1.09 436.  #> 12 Upper Yukon              1.79e-1 1.78e-1 0.0338  1.19e- 1 0.235    1.04 384. tr_plot(obj = msgsi_out$trace_comb)"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_templin.html","id":null,"dir":"Reference","previous_headings":"","what":"Templin baseline data. — base_templin","title":"Templin baseline data. — base_templin","text":"example genotype data preparing msgsi input data rubias format (prep_msgsi_data() can also take GCL format) making road-scale baseline","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_templin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Templin baseline data. — base_templin","text":"","code":"base_templin"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_templin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Templin baseline data. — base_templin","text":"tibble 29363 rows 60 variables:","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_templin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Templin baseline data. — base_templin","text":"ADF&G GCL database LOKI","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_yukon.html","id":null,"dir":"Reference","previous_headings":"","what":"Yukon baseline data. — base_yukon","title":"Yukon baseline data. — base_yukon","text":"example genotype data preparing msgsi input data rubias format (prep_msgsi_data() can also take GCL format) making regional, finer-scale baseline","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_yukon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yukon baseline data. — base_yukon","text":"","code":"base_yukon"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_yukon.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Yukon baseline data. — base_yukon","text":"tibble 5435 rows 358 variables:","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_yukon.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Yukon baseline data. — base_yukon","text":"ADF&G GCL database LOKI","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/indiv_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual assignment summary — indiv_assign","title":"Individual assignment summary — indiv_assign","text":"Individual assignment summary","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/indiv_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual assignment summary — indiv_assign","text":"","code":"indiv_assign(mdl_out, mdl_dat)"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/indiv_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual assignment summary — indiv_assign","text":"mdl_out Model output object name. mdl_dat Input data object name.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/indiv_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual assignment summary — indiv_assign","text":"Individual assignment summary","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/indiv_assign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual assignment summary — indiv_assign","text":"","code":"# set up input data and run multistage model msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 15.25418 secs  msgsi_out <- msgsi_mdl(msgsi_dat, nreps = 25, nburn = 15, thin = 1, nchains = 1) #> Running model (and the category is... Best Mother!) #> Time difference of 1.883104 secs #> October-10-2023 23:37  # trace plot ind_iden <- indiv_assign(msgsi_out, msgsi_dat)"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/mix.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixture data. — mix","title":"Mixture data. — mix","text":"example genotype data preparing msgsi input data rubias format (prep_msgsi_data() can also take GCL format) making mixed population data made mixture sample, real","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/mix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixture data. — mix","text":"","code":"mix"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/mix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mixture data. — mix","text":"tibble 150 rows 358 variables:","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/mix.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mixture data. — mix","text":"ADF&G GCL database LOKI","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/msgsi_mdl.html","id":null,"dir":"Reference","previous_headings":"","what":"Run multistage GSI model — msgsi_mdl","title":"Run multistage GSI model — msgsi_mdl","text":"Run multistage GSI model","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/msgsi_mdl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run multistage GSI model — msgsi_mdl","text":"","code":"msgsi_mdl(   dat_in,   nreps,   nburn,   thin,   nchains,   nadapt = 0,   keep_burn = FALSE,   cond_gsi = TRUE,   out_path = NULL,   seed = NULL,   iden_output = TRUE )"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/msgsi_mdl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run multistage GSI model — msgsi_mdl","text":"dat_in Name input data. nreps Total number iterations (includes burn-ins). nburn Number warm-runs. thin Frequency thin output. nchains Number independent MCMC processes. nadapt Number adaptation run (default 0). available running model fully Bayesian mode. keep_burn save burn-ins (default FALSE). cond_gsi run model conditional GSI mode (default TRUE). out_path File path save output. Leave empty want save output. seed Random seed reproducibility. Default NULL (random seed). iden_output Option trace history individual assignments included final output. Default TRUE.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/msgsi_mdl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run multistage GSI model — msgsi_mdl","text":"list contains reporting group proportion summary trace tier 1 (summ_t1, trace_t1), tier 2 (summ_t2, trace_t2) two tiers combined (summ_comb, trace_comb), record individual assignment first tier individual (idens).","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/msgsi_mdl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run multistage GSI model — msgsi_mdl","text":"","code":"# setup input data msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 14.42189 secs  # run multistage model msgsi_out <- msgsi_mdl(msgsi_dat, nreps = 25, nburn = 15, thin = 1, nchains = 1) #> Running model (and the category is... Femme Queen Vogue!) #> Time difference of 1.811099 secs #> October-10-2023 23:37"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/prep_msgsi_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Preparing multistage GSI input data — prep_msgsi_data","title":"Preparing multistage GSI input data — prep_msgsi_data","text":"Preparing multistage GSI input data","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/prep_msgsi_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preparing multistage GSI input data — prep_msgsi_data","text":"","code":"prep_msgsi_data(   mixture_data,   baseline1_data,   baseline2_data,   pop1_info,   pop2_info,   sub_group,   file_path = NULL,   loci1 = NULL,   loci2 = NULL )"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/prep_msgsi_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preparing multistage GSI input data — prep_msgsi_data","text":"mixture_data Individual fish loci tier 1 tier 2. Mixture data GCL rubias format. baseline1_data Tier 1 baseline data GCL rubias format. baseline2_data Tier 2 baseline data GCL rubias format. pop1_info Population information tier 1. tibble columns collection (collection names), repunit (reporting unit names), grpvec (group numbers), origin (wild/hatchery). pop2_info Population information tier 2. tibble columns collection (collection names), repunit (reporting unit names), grpvec (group numbers). sub_group Group numbers groups interest. Group id numbers tier 1 identify groups tier 2. file_path want save copy input data. Leave empty want save copy. loci1 Optional. Provide loci (tier 1) fail-safe check. loci2 Optional. Provide loci (tier 2) fail-safe check.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/prep_msgsi_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preparing multistage GSI input data — prep_msgsi_data","text":"list objects input data msgsi_mdl()","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/prep_msgsi_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preparing multistage GSI input data — prep_msgsi_data","text":"","code":"msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 14.39491 secs"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/templin_pops211.html","id":null,"dir":"Reference","previous_headings":"","what":"Templin population infomation. — templin_pops211","title":"Templin population infomation. — templin_pops211","text":"tibble contains collection name, reporting unit, group number 211 populations Templin baseline","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/templin_pops211.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Templin population infomation. — templin_pops211","text":"","code":"templin_pops211"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/templin_pops211.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Templin population infomation. — templin_pops211","text":"tibble 211 rows 3 variables: collection, repunit, grpvec","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/tr_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MCMC trace — tr_plot","title":"Plot MCMC trace — tr_plot","text":"Plot MCMC trace","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/tr_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MCMC trace — tr_plot","text":"","code":"tr_plot(obj, nburn = 0, thin = 1, name_order = NULL)"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/tr_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MCMC trace — tr_plot","text":"obj Trace model output. nburn Number burn-set ran model. Default 0 save burn-ins (keep_burn = FALSE). thin Number thinning set ran model. Default 1 (thinning). name_order Arrange reporting groups wish. Leave empty want accept default.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/tr_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MCMC trace — tr_plot","text":"Trace plot ggplot","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/tr_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot MCMC trace — tr_plot","text":"","code":"# set up input data and run multistage model msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 14.18366 secs  msgsi_out <- msgsi_mdl(msgsi_dat, nreps = 25, nburn = 15, thin = 1, nchains = 1) #> Running model (and the category is... Bring It Like Royalty!) #> Time difference of 1.871753 secs #> October-10-2023 23:38  # trace plot tr_plot(obj = msgsi_out$trace_comb)"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/yukon_pops50.html","id":null,"dir":"Reference","previous_headings":"","what":"Yukon population infomation. — yukon_pops50","title":"Yukon population infomation. — yukon_pops50","text":"tibble contains collection name, reporting unit, group number 50 populations Yukon River baseline","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/yukon_pops50.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yukon population infomation. — yukon_pops50","text":"","code":"yukon_pops50"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/yukon_pops50.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Yukon population infomation. — yukon_pops50","text":"tibble 50 rows 3 variables: collection, repunit, grpvec","code":""}]
