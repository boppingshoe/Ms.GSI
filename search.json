[{"path":"https://boppingshoe.github.io/Ms.GSI/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Ms.GSI authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"document contains background information integrated multistage genetic stock identification (GSI) model two parts. first part describes use package Ms.GSI conduct GSI analysis. steps include formatting input data, running integrated multistage GSI model, summarizing results. second part details technical background integrated multistage GSI model mathematical theory. separate article describe general background integrated multistage framework (add link integrated multistage paper).","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"how-to-use-ms-gsi","dir":"Articles","previous_headings":"","what":"How to use Ms.GSI","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Ms.GSI follows work flow: format input data, run integrated multistage model, summarize results/convergence diagnostics.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"input-data","dir":"Articles","previous_headings":"How to use Ms.GSI","what":"Input data","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"pieces information needed input data set: broad-scale baseline regional baseline mixture sample broad-scale population information regional population information pre-loaded example data sets available Ms.GSI. look one time. Note example data sets simulated using existing baseline archived Alaska Department Fish & Game Gene Conservation Lab (GCL). fabricated data set represent true population proportions real fisheries. example, made scenario similar Bering Sea groundfish fisheries Chinook salmon harvested bycatch originated wide range geographic areas. Within bycatch sample, interested proportion contribution lower, middle upper Yukon River reporting groups (see map ). used coast-wide data set Chinook salmon (Templin et al. 2011; Templin baseline hereafter) broad-scale baseline separate Yukon River fish non-Yukon stocks data set first stage analysis. However, genetic markers Templin baseline unable clearly distinguish lower Yukon River coastal western Alaska populations, used second baseline additional genetic markers specifically designed differentiate Yukon River Chinook salmon populations (Lee et al. 2021; Yukon River baseline hereafter) regional fine-scale baseline second stage. important note original grouping Templin baseline, Lower Yukon part Coastal Western Alaska reporting group. isolated Lower Yukon rest Coastal Western Alaska, accuracy proportion estimates likely diminish breakup Coastal Western Alaska reporting group. recommend using genetic baseline beyond original design. researchers aware capability genetic baselines utilizing integrated multistage model. example, ideal keep Coastal Western Alaska group intact broad-scale baseline, break group Lower Yukon others using fine-scale regional baseline. However, time writing, regional baseline adequate resolution still development. assembled mixture sample containing 150 individuals collection sites across Yukon River, coastal western Alaskan, Alaska Peninsula, Gulf Alaska, Kamchatka Peninsula (Russia). collections grouped five reporting groups: Lower Yukon, Middle Yukon, Upper Yukon, Coastal Western Alaska (Coastal West Alaska), Others.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"mixture","dir":"Articles","previous_headings":"How to use Ms.GSI > Input data","what":"Mixture","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"First take look baseline mixture samples. Ms.GSI accepts genotype information two format: 1) GCL format 2) package rubias format. example data sets rubias format naming convention, procedures GCL format same1. Columns 5 358 contain genotype information loci broad-scale regional baselines. specify loci baseline (can want double check, later). Ms.GSI matches loci mixture baselines long locus names consistent. fish known-origin, can specify identities adding column called known_collection mixture data set. entry known-origin match collection name broad-scale baseline. Fish unknown-origin NA entry.","code":"print(dplyr::as_tibble(mix)) #> # A tibble: 150 × 358 #>    sample_type repunit collection indiv   `GTH2B-550` `GTH2B-550.1` NOD1  NOD1.1 #>    <chr>       <lgl>   <chr>      <chr>   <chr>       <chr>         <chr> <chr>  #>  1 mixture     NA      Bering Sea fish_1  C           G             C     C      #>  2 mixture     NA      Bering Sea fish_2  C           C             C     G      #>  3 mixture     NA      Bering Sea fish_3  C           C             C     G      #>  4 mixture     NA      Bering Sea fish_4  C           C             C     C      #>  5 mixture     NA      Bering Sea fish_5  C           G             C     G      #>  6 mixture     NA      Bering Sea fish_6  C           C             C     G      #>  7 mixture     NA      Bering Sea fish_7  C           C             NA    NA     #>  8 mixture     NA      Bering Sea fish_8  C           G             NA    NA     #>  9 mixture     NA      Bering Sea fish_9  C           G             C     G      #> 10 mixture     NA      Bering Sea fish_10 C           G             NA    NA     #> # ℹ 140 more rows #> # ℹ 350 more variables: `Ots_100884-287` <chr>, `Ots_100884-287.1` <chr>, #> #   `Ots_101554-407` <chr>, `Ots_101554-407.1` <chr>, `Ots_102414-395` <chr>, #> #   `Ots_102414-395.1` <chr>, `Ots_102867-609` <chr>, `Ots_102867-609.1` <chr>, #> #   `Ots_103041-52` <chr>, `Ots_103041-52.1` <chr>, `Ots_103122-180` <chr>, #> #   `Ots_103122-180.1` <chr>, `Ots_104048-194` <chr>, `Ots_104048-194.1` <chr>, #> #   `Ots_104063-132` <chr>, `Ots_104063-132.1` <chr>, `Ots_104415-88` <chr>, …"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"broad-scale-baseline","dir":"Articles","previous_headings":"How to use Ms.GSI > Input data","what":"Broad-scale baseline","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Next, take look broad-scale (Templin) baseline example provided Ms.GSI. originally 45 loci Templin baseline, reduced marker set 28 loci due limitation data size (technical reasons). However, demonstration purpose, data set suffice.","code":"print(dplyr::as_tibble(base_templin)) #> # A tibble: 29,363 × 60 #>    sample_type repunit collection indiv   `GTH2B-550` `GTH2B-550.1` NOD1  NOD1.1 #>    <chr>       <chr>   <chr>      <chr>   <chr>       <chr>         <chr> <chr>  #>  1 reference   Russia  KBIST98L   KBIST9… C           C             C     G      #>  2 reference   Russia  KBIST98L   KBIST9… C           G             C     G      #>  3 reference   Russia  KBIST98L   KBIST9… C           G             C     G      #>  4 reference   Russia  KBIST98L   KBIST9… C           C             G     G      #>  5 reference   Russia  KBIST98L   KBIST9… C           G             G     G      #>  6 reference   Russia  KBIST98L   KBIST9… C           C             C     C      #>  7 reference   Russia  KBIST98L   KBIST9… C           G             C     G      #>  8 reference   Russia  KBIST98L   KBIST9… C           C             C     G      #>  9 reference   Russia  KBIST98L   KBIST9… C           G             C     G      #> 10 reference   Russia  KBIST98L   KBIST9… C           C             G     G      #> # ℹ 29,353 more rows #> # ℹ 52 more variables: `Ots_2KER-137` <chr>, `Ots_2KER-137.1` <chr>, #> #   `Ots_AsnRS-72` <chr>, `Ots_AsnRS-72.1` <chr>, Ots_ETIF1A <chr>, #> #   Ots_ETIF1A.1 <chr>, `Ots_GPH-318` <chr>, `Ots_GPH-318.1` <chr>, #> #   `Ots_GST-207` <chr>, `Ots_GST-207.1` <chr>, `Ots_hnRNPL-533` <chr>, #> #   `Ots_hnRNPL-533.1` <chr>, `Ots_HSP90B-100` <chr>, `Ots_HSP90B-100.1` <chr>, #> #   `Ots_IGF1-91` <chr>, `Ots_IGF1-91.1` <chr>, `Ots_IK1-328` <chr>, …"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"regional-baseline","dir":"Articles","previous_headings":"How to use Ms.GSI > Input data","what":"Regional baseline","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"regional baseline (Yukon) format. originally 380 loci Yukon River Chinook baseline, reduced numbers 177 demonstration.","code":"print(dplyr::as_tibble(base_yukon)) #> # A tibble: 5,435 × 358 #>    sample_type repunit   collection indiv `GTH2B-550` `GTH2B-550.1` NOD1  NOD1.1 #>    <chr>       <chr>     <chr>      <chr> <chr>       <chr>         <chr> <chr>  #>  1 reference   Lower Yu… KANDR02.K… KAND… G           G             C     C      #>  2 reference   Lower Yu… KANDR02.K… KAND… C           G             C     C      #>  3 reference   Lower Yu… KANDR02.K… KAND… G           G             C     C      #>  4 reference   Lower Yu… KANDR02.K… KAND… G           G             C     G      #>  5 reference   Lower Yu… KANDR02.K… KAND… C           G             C     C      #>  6 reference   Lower Yu… KANDR02.K… KAND… C           C             C     C      #>  7 reference   Lower Yu… KANDR02.K… KAND… C           G             G     G      #>  8 reference   Lower Yu… KANDR02.K… KAND… C           C             G     G      #>  9 reference   Lower Yu… KANDR02.K… KAND… C           C             G     G      #> 10 reference   Lower Yu… KANDR02.K… KAND… C           G             C     G      #> # ℹ 5,425 more rows #> # ℹ 350 more variables: `Ots_100884-287` <chr>, `Ots_100884-287.1` <chr>, #> #   `Ots_101554-407` <chr>, `Ots_101554-407.1` <chr>, `Ots_102414-395` <chr>, #> #   `Ots_102414-395.1` <chr>, `Ots_102867-609` <chr>, `Ots_102867-609.1` <chr>, #> #   `Ots_103041-52` <chr>, `Ots_103041-52.1` <chr>, `Ots_103122-180` <chr>, #> #   `Ots_103122-180.1` <chr>, `Ots_104048-194` <chr>, `Ots_104048-194.1` <chr>, #> #   `Ots_104063-132` <chr>, `Ots_104063-132.1` <chr>, `Ots_104415-88` <chr>, …"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"population-information","dir":"Articles","previous_headings":"How to use Ms.GSI > Input data","what":"Population information","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Another piece information needed population details baseline. need include three columns population information table. Column collection contains names population baseline. Column reunit specifies reporting group population belongs . Column grpvec specifies identification number reporting group. shows first ten rows population information Templin (broad-scale) baseline. hatchery populations mixture sample, can tell Ms.GSI either collection belongs natural hatchery-origin adding origin column population information table. origin column, identify collection \"wild\" \"hatchery\". don’t care separate natural hatchery origins, can lump one collection. case, don’t need add origin column. Also, option identify hatchery fish available broad-scale baseline, don’t add origin column population table regional baseline. Population information table Yukon (regional) baseline format, necessarily order. data files ready (recommend saving .Rdata .Rds files), can use prep_msgsi_data() function convert input data set model run. ’ll also need identify “groups interest” parameter sub-group. example, groups interests Lower Yukon, Middle Yukon Upper Yukon reporting groups. identify numbers 3, 4, 5 broad-scale baseline. ’s option save input data designated directory identifying location parameter file_path. prep_msgsi_data() function matches loci mixture baselines. want make sure didn’t miss locus baselines mixture, can manually provide loci names (string vector) baseline inputting loci1 loci2. example don’t manually provide lists loci trust mixture baselines correct loci. prep_msgsi_data() formats data files put list. took seconds format input data case. Bigger data sets may take longer. first rows/items input data list:","code":"print(dplyr::as_tibble(templin_pops211)) #> # A tibble: 211 × 3 #>    collection       repunit             grpvec #>    <chr>            <chr>                <dbl> #>  1 KBIST98L         Russia                   1 #>  2 KBOLS02.KBOLS98E Russia                   1 #>  3 KKAMC97.KKAMC98L Russia                   1 #>  4 KPAKH02          Russia                   1 #>  5 KPILG05.KPILG06  Coastal West Alaska      2 #>  6 KUNAL05          Coastal West Alaska      2 #>  7 KGOLS05.KGOLS06  Coastal West Alaska      2 #>  8 KANDR02.KANDR03  Lower Yukon              3 #>  9 KANVI02          Lower Yukon              3 #> 10 KGISA01          Lower Yukon              3 #> # ℹ 201 more rows print(dplyr::as_tibble(yukon_pops50)) #> # A tibble: 50 × 3 #>    collection                          grpvec repunit      #>    <chr>                                <dbl> <chr>        #>  1 KANDR02.KANDR03                          1 Lower Yukon  #>  2 KANVI03.KANVI07                          1 Lower Yukon  #>  3 KNUL12SF                                 1 Lower Yukon  #>  4 KNUL12NF                                 1 Lower Yukon  #>  5 KGISA01                                  1 Lower Yukon  #>  6 KKATE02.KKATE12                          1 Lower Yukon  #>  7 KHENS01                                  2 Middle Yukon #>  8 KHENS07.KHENS15                          2 Middle Yukon #>  9 KSFKOY03                                 2 Middle Yukon #> 10 KMFKOY10.KMFKOY11.KMFKOY12.KMFKOY13      2 Middle Yukon #> # ℹ 40 more rows msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 9.539811 secs lapply(msgsi_dat, head) #> $x #> # A tibble: 6 × 74 #>   indiv    `GTH2B-550_1` `GTH2B-550_2` NOD1_1 NOD1_2 `Ots_2KER-137_1` #>   <chr>            <int>         <int>  <int>  <int>            <int> #> 1 fish_1               1             1      2      0                0 #> 2 fish_10              1             1      0      0                1 #> 3 fish_100             1             1      1      1                1 #> 4 fish_101             1             1      1      1                1 #> 5 fish_102             0             2      0      2                0 #> 6 fish_103             2             0      1      1                1 #> # ℹ 68 more variables: `Ots_2KER-137_2` <int>, `Ots_2KER-137_3` <int>, #> #   `Ots_AsnRS-72_1` <int>, `Ots_AsnRS-72_2` <int>, `Ots_AsnRS-72_3` <int>, #> #   Ots_ETIF1A_1 <int>, Ots_ETIF1A_2 <int>, `Ots_GPH-318_1` <int>, #> #   `Ots_GPH-318_2` <int>, `Ots_GST-207_1` <int>, `Ots_GST-207_2` <int>, #> #   `Ots_HSP90B-100_1` <int>, `Ots_HSP90B-100_2` <int>, `Ots_IGF1-91_1` <int>, #> #   `Ots_IGF1-91_2` <int>, `Ots_IGF1-91_3` <int>, `Ots_IK1-328_1` <int>, #> #   `Ots_IK1-328_2` <int>, `Ots_IK1-328_3` <int>, `Ots_LEI-292_1` <int>, … #>  #> $x2 #> # A tibble: 6 × 355 #>   indiv    `GTH2B-550_1` `GTH2B-550_2` NOD1_1 NOD1_2 `Ots_100884-287_1` #>   <chr>            <int>         <int>  <int>  <int>              <int> #> 1 fish_1               1             1      2      0                  2 #> 2 fish_10              1             1      0      0                  0 #> 3 fish_100             1             1      1      1                  1 #> 4 fish_101             1             1      1      1                  2 #> 5 fish_102             2             0      0      2                  1 #> 6 fish_103             0             2      1      1                  1 #> # ℹ 349 more variables: `Ots_100884-287_2` <int>, `Ots_101554-407_1` <int>, #> #   `Ots_101554-407_2` <int>, `Ots_102414-395_1` <int>, #> #   `Ots_102414-395_2` <int>, `Ots_102867-609_1` <int>, #> #   `Ots_102867-609_2` <int>, `Ots_103041-52_1` <int>, `Ots_103041-52_2` <int>, #> #   `Ots_103122-180_1` <int>, `Ots_103122-180_2` <int>, #> #   `Ots_104048-194_1` <int>, `Ots_104048-194_2` <int>, #> #   `Ots_104063-132_1` <int>, `Ots_104063-132_2` <int>, … #>  #> $y #> # A tibble: 6 × 76 #>   collection            repunit grpvec `GTH2B-550_1` `GTH2B-550_2` NOD1_1 NOD1_2 #>   <chr>                 <chr>    <dbl>         <int>         <int>  <int>  <int> #> 1 CHBIG92.KIBIG93.KBIG… Northe…      9           254            82    104    228 #> 2 CHCRY92.KICRY94.KCRY… Coasta…     10           306           302    120    488 #> 3 CHDMT92.KDEER94       Coasta…     10           178           116     77    217 #> 4 CHKAN92.KIKAN93.KKAN… Coasta…      2           341           147    281    199 #> 5 CHKOG92.KIKOG93.KKOG… Coasta…      2           205            91    191    105 #> 6 CHNUU92.KINUS93       Coasta…      2            85            27     73     41 #> # ℹ 69 more variables: `Ots_2KER-137_1` <int>, `Ots_2KER-137_2` <int>, #> #   `Ots_2KER-137_3` <int>, `Ots_AsnRS-72_1` <int>, `Ots_AsnRS-72_2` <int>, #> #   `Ots_AsnRS-72_3` <int>, Ots_ETIF1A_1 <int>, Ots_ETIF1A_2 <int>, #> #   `Ots_GPH-318_1` <int>, `Ots_GPH-318_2` <int>, `Ots_GST-207_1` <int>, #> #   `Ots_GST-207_2` <int>, `Ots_HSP90B-100_1` <int>, `Ots_HSP90B-100_2` <int>, #> #   `Ots_IGF1-91_1` <int>, `Ots_IGF1-91_2` <int>, `Ots_IGF1-91_3` <int>, #> #   `Ots_IK1-328_1` <int>, `Ots_IK1-328_2` <int>, `Ots_IK1-328_3` <int>, … #>  #> $y2 #> # A tibble: 6 × 357 #>   collection            grpvec repunit `GTH2B-550_1` `GTH2B-550_2` NOD1_1 NOD1_2 #>   <chr>                  <dbl> <chr>           <int>         <int>  <int>  <int> #> 1 CHSID92j                   3 Upper …             7           183    116     74 #> 2 K100MILECR16.K100MIL…      3 Upper …             7           103     78     34 #> 3 KANDR02.KANDR03            1 Lower …            78           230    208    100 #> 4 KANVI03.KANVI07            1 Lower …            62           164    131     79 #> 5 KBEAV97                    2 Middle…            40           148    152     38 #> 6 KBIGS87.KBIGS07            3 Upper …            30           258    231     65 #> # ℹ 350 more variables: `Ots_100884-287_1` <int>, `Ots_100884-287_2` <int>, #> #   `Ots_101554-407_1` <int>, `Ots_101554-407_2` <int>, #> #   `Ots_102414-395_1` <int>, `Ots_102414-395_2` <int>, #> #   `Ots_102867-609_1` <int>, `Ots_102867-609_2` <int>, #> #   `Ots_103041-52_1` <int>, `Ots_103041-52_2` <int>, `Ots_103122-180_1` <int>, #> #   `Ots_103122-180_2` <int>, `Ots_104048-194_1` <int>, #> #   `Ots_104048-194_2` <int>, `Ots_104063-132_1` <int>, … #>  #> $iden #> NULL #>  #> $nalleles #>    GTH2B-550         NOD1 Ots_2KER-137 Ots_AsnRS-72   Ots_ETIF1A  Ots_GPH-318  #>            2            2            3            3            2            2  #>  #> $nalleles2 #>      GTH2B-550           NOD1 Ots_100884-287 Ots_101554-407 Ots_102414-395  #>              2              2              2              2              2  #> Ots_102867-609  #>              2  #>  #> $groups #> # A tibble: 6 × 3 #>   collection                      repunit                  grpvec #>   <chr>                           <chr>                     <dbl> #> 1 CHBIG92.KIBIG93.KBIGB04.KBIGB95 Northeast Gulf of Alaska      9 #> 2 CHCRY92.KICRY94.KCRYA05         Coastal Southeast Alaska     10 #> 3 CHDMT92.KDEER94                 Coastal Southeast Alaska     10 #> 4 CHKAN92.KIKAN93.KKANE05         Coastal West Alaska           2 #> 5 CHKOG92.KIKOG93.KKOGR05         Coastal West Alaska           2 #> 6 CHNUU92.KINUS93                 Coastal West Alaska           2 #>  #> $p2_groups #> # A tibble: 6 × 3 #>   collection                repunit      grpvec #>   <chr>                     <chr>         <dbl> #> 1 CHSID92j                  Upper Yukon       3 #> 2 K100MILECR16.K100MILECR15 Upper Yukon       3 #> 3 KANDR02.KANDR03           Lower Yukon       1 #> 4 KANVI03.KANVI07           Lower Yukon       1 #> 5 KBEAV97                   Middle Yukon      2 #> 6 KBIGS87.KBIGS07           Upper Yukon       3 #>  #> $comb_groups #> # A tibble: 6 × 3 #>   collection                      repunit                  grpvec #>   <chr>                           <chr>                     <dbl> #> 1 CHBIG92.KIBIG93.KBIGB04.KBIGB95 Northeast Gulf of Alaska      9 #> 2 CHCRY92.KICRY94.KCRYA05         Coastal Southeast Alaska     10 #> 3 CHDMT92.KDEER94                 Coastal Southeast Alaska     10 #> 4 CHKAN92.KIKAN93.KKANE05         Coastal West Alaska           2 #> 5 CHKOG92.KIKOG93.KKOGR05         Coastal West Alaska           2 #> 6 CHNUU92.KINUS93                 Coastal West Alaska           2 #>  #> $sub_group #> [1] 3 4 5 #>  #> $group_names_t1 #> [1] \"Russia\"                 \"Coastal West Alaska\"    \"Lower Yukon\"            #> [4] \"Middle Yukon\"           \"Upper Yukon\"            \"North Alaska Peninsula\" #>  #> $group_names_t2 #> [1] \"Lower Yukon\"  \"Middle Yukon\" \"Upper Yukon\"  #>  #> $wildpops #> [1] \"CHBIG92.KIBIG93.KBIGB04.KBIGB95\" \"CHCRY92.KICRY94.KCRYA05\"         #> [3] \"CHDMT92.KDEER94\"                 \"CHKAN92.KIKAN93.KKANE05\"         #> [5] \"CHKOG92.KIKOG93.KKOGR05\"         \"CHNUU92.KINUS93\"                 #>  #> $hatcheries #> NULL"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"genetic-stock-identification","dir":"Articles","previous_headings":"How to use Ms.GSI","what":"Genetic stock identification","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"input data set ready, can use msgsi_mdl() run model. used running rubias, Ms.GSI might feel bit slow. 1) running two GSI models tandem, takes twice long running single model, 2) Ms.GSI written solely R, computationally efficient language C. , code Ms.GSI C? ’re technically advanced like folks developed rubias package (.e., don’t know code C++). running time, recommend running integrated multistage model conditional GSI mode (default setting). option run model fully Bayesian mode one choose . run model fully Bayesian mode, option include numbers adaptation run. people think adaptation run encourages convergence fully Bayesian mode. test theory provide option want try . demonstrate model run one chains 150 iterations (first 50 warm-runs, burn-ins). run one chain example can pass CMD check building vignette document2. reality, definitely run multiple chains iterations. also options keep burn-ins set random seed reproducible results. don’t show example though (can always ?msgsi_mdl).","code":"msgsi_out <- msgsi_mdl(msgsi_dat, nreps = 150, nburn = 50, thin = 1, nchains = 1) #> Running model (and the category is... Linen Vs. Silk!) #> Time difference of 2.26746 secs #> April-25-2025 19:10"},{"path":[]},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"stock-proportions","dir":"Articles","previous_headings":"How to use Ms.GSI > Summarizing results","what":"Stock proportions","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"output model contains eight items: summ_t1, trace_t1, summ_t2, trace_t2, summ_comb, trace_comb, comb_groups, iden_t1 idens_t2. Items “summ” summary reporting group proportions associated convergence diagnostics. want see summaries stage one two individually, summ_t1 summ_t2 show . people probably want see combined summary, summ_comb. column names self explanatory, others might need additional descriptions. ci.05 ci.95 lower upper bounds 90% credible interval. GR Gelman-Rubin statistic (.k.. R̂\\hat R). example, Gelman-Rubin statistic calculated run one chain. n_eff effective size, NeffN_{eff}. discuss diagnose convergence document. Please consult Gelman et al. 2014, Gelman & Rubin 1992, Brooks & Gelman 1998 literature statistical methods. Items “trace” posterior sample history, trace history, either stage one, two, combined. Trace history needed making trace plots. need combine reporting groups proportions combine variance, trace histories need. trace_ items tibbles collection column. two additional columns, itr chain, identify Markov chain Monte Carlo (MCMC) sampling iteration chain. comb_groups provided output reference trace plot stratified estimator. Grouping stage one two can also found input data.","code":"msgsi_out$summ_comb #> # A tibble: 12 × 9 #>    group                mean  median      sd    ci.05   ci.95    p0 GR     n_eff #>    <chr>               <dbl>   <dbl>   <dbl>    <dbl>   <dbl> <dbl> <lgl>  <dbl> #>  1 Russia            3.94e-2 3.90e-2 2.15e-2 1.24e- 2 0.0738   0    NA     25.7  #>  2 Coastal West Ala… 1.01e-1 5.84e-2 1.05e-1 7.83e-13 0.289    0.17 NA      2.74 #>  3 North Alaska Pen… 3.14e-2 2.58e-2 2.30e-2 1.07e- 9 0.0692   0.08 NA     22.6  #>  4 Northwest Gulf o… 2.55e-1 2.49e-1 6.97e-2 1.55e- 1 0.379    0    NA     16.6  #>  5 Copper            3.04e-4 3.53e-6 7.76e-4 1.84e-18 0.00197  0.41 NA     54.0  #>  6 Northeast Gulf o… 4.85e-3 1.21e-5 1.18e-2 4.06e-16 0.0298   0.36 NA      7.71 #>  7 Coastal Southeas… 2.18e-3 7.16e-6 5.48e-3 1.91e-16 0.0131   0.39 NA     25.2  #>  8 British Columbia  5.95e-4 8.70e-7 1.51e-3 1.05e-20 0.00462  0.48 NA    100    #>  9 WA/OR/CA          3.49e-4 9.68e-7 8.16e-4 2.41e-18 0.00234  0.45 NA     29.7  #> 10 Lower Yukon       3.17e-1 2.99e-1 1.03e-1 1.75e- 1 0.490    0    NA      3.54 #> 11 Middle Yukon      6.67e-2 6.56e-2 2.32e-2 3.48e- 2 0.107    0    NA     62.2  #> 12 Upper Yukon       1.82e-1 1.81e-1 2.92e-2 1.36e- 1 0.231    0    NA    100 msgsi_out$trace_comb #> # A tibble: 100 × 238 #>    CHBIG92.KIBIG93.KBIGB04.KBIGB95 CHCRY92.KICRY94.KCRYA05 CHDMT92.KDEER94 #>                              <dbl>                   <dbl>           <dbl> #>  1                        3.23e-47               1.80e-172       6.16e- 31 #>  2                        5.80e- 7               1.61e-101       8.97e- 63 #>  3                        7.12e-40               1.31e-123       6.78e- 14 #>  4                        2.16e-15               2.42e-124       2.23e-308 #>  5                        1.38e-26               3.17e- 32       5.69e-283 #>  6                        1.66e- 3               2.23e-308       9.08e- 82 #>  7                        1.27e-67               2.23e-308       7.83e- 53 #>  8                        4.11e-41               3.03e- 48       4.36e- 22 #>  9                        1.60e-24               2.23e-308       1.69e- 62 #> 10                        1.08e-30               3.22e- 35       4.91e-198 #> # ℹ 90 more rows #> # ℹ 235 more variables: CHKAN92.KIKAN93.KKANE05 <dbl>, #> #   CHKOG92.KIKOG93.KKOGR05 <dbl>, CHNUU92.KINUS93 <dbl>, #> #   CHTAH92.KTAHI04 <dbl>, CHWHI92.KWHIT98.KWHITC05 <dbl>, KALSE04 <dbl>, #> #   KANCH06.KANCH10 <dbl>, KANDR89.KANDR04 <dbl>, KAROL05 <dbl>, #> #   KBENJ05.KBENJ06 <dbl>, KBIGCK04 <dbl>, KBIGQU96 <dbl>, #> #   KBIRK01.KBIRK02.KBIRK03.KBIRK97.KBIRK99 <dbl>, KBIST98L <dbl>, …"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"individual-assignments","dir":"Articles","previous_headings":"How to use Ms.GSI > Summarizing results","what":"Individual assignments","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"last two items output identity assignment history individual mixture sample. column represents individual mixture, row records identity assigned iteration chain. numbers population identifiers order population information files (baseline files). Individuals ordered input data (.e., mixture data). Individual identity output format may useful users. , Ms.GSI function indiv_assign() summarize reporting group assignment probabilities individual mixture. summary individual assignment column named ID identifies individual mixture. regional column shows probability individual belong group interest, , within region focus. rest columns probabilities regional reporting groups. Probabilities row sum one.","code":"msgsi_out$idens_t1 #> # A tibble: 100 × 150 #>       V1    V2    V3    V4    V5    V6    V7    V8    V9   V10   V11   V12   V13 #>    <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> <int> #>  1   116    15    11   141   141    15    97   141   116   114   141   116   141 #>  2   141    69   141   141   141    11    97   141   141    23   141   157    11 #>  3   116   116    21   141   141    23    97   141   141   114    83   157    11 #>  4    69    69    21    11   116   152    97   141    11    21    11   141    69 #>  5   141    21    21   141   116    15    97   141    97   114    11   141    11 #>  6    69   157    21    11    97    23    97   141   141   114   114   141   152 #>  7   141   157    97    11   141    11    97   141    69   114    11   114    69 #>  8   141    11    21   116   141    11    97   141   141    11   141   157    69 #>  9    69   111    25    11   114   152    97   141    11   141    69   157   141 #> 10   141    69    25   116    97   152    97   116    97    11   116   141    11 #> # ℹ 90 more rows #> # ℹ 137 more variables: V14 <int>, V15 <int>, V16 <int>, V17 <int>, V18 <int>, #> #   V19 <int>, V20 <int>, V21 <int>, V22 <int>, V23 <int>, V24 <int>, #> #   V25 <int>, V26 <int>, V27 <int>, V28 <int>, V29 <int>, V30 <int>, #> #   V31 <int>, V32 <int>, V33 <int>, V34 <int>, V35 <int>, V36 <int>, #> #   V37 <int>, V38 <int>, V39 <int>, V40 <int>, V41 <int>, V42 <int>, #> #   V43 <int>, V44 <int>, V45 <int>, V46 <int>, V47 <int>, V48 <int>, … indiv_assign(mdl_out = msgsi_out, mdl_dat = msgsi_dat) #> # A tibble: 150 × 13 #>    ID       Russia `Coastal West Alaska` `North Alaska Peninsula` #>  * <chr>     <dbl>                 <dbl>                    <dbl> #>  1 fish_1     0.01                  0.25                     0    #>  2 fish_10    0.05                  0.11                     0.06 #>  3 fish_100   0.52                  0.05                     0.02 #>  4 fish_101   0.01                  0.17                     0    #>  5 fish_102   0                     0.18                     0.08 #>  6 fish_103   0                     0.07                     0    #>  7 fish_104   0                     0                        0    #>  8 fish_105   0                     0.08                     0    #>  9 fish_106   0                     0.08                     0    #> 10 fish_107   0.01                  0                        0.24 #> # ℹ 140 more rows #> # ℹ 9 more variables: `Northwest Gulf of Alaska` <dbl>, Copper <dbl>, #> #   `Northeast Gulf of Alaska` <dbl>, `Coastal Southeast Alaska` <dbl>, #> #   `British Columbia` <dbl>, `WA/OR/CA` <dbl>, `Lower Yukon` <dbl>, #> #   `Middle Yukon` <dbl>, `Upper Yukon` <dbl>"},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"trace-plot","dir":"Articles","previous_headings":"How to use Ms.GSI > Summarizing results","what":"Trace plot","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Ms.GSI function make trace plot examine mixing MCMC chains. Don’t forget include group information (groups, p2_groups, comb_groups) trace history want plot. Trace plots reporting group proportions.","code":"tr_plot(obj = msgsi_out$trace_comb, pop_info = msgsi_out$comb_groups)"},{"path":[]},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"pella-masuda-model","dir":"Articles","previous_headings":"Methods (math!)","what":"Pella-Masuda Model","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"integrated multistage GSI model essentially two Bayesian GSI models stacked top ; hence name “multistage.” Pella-Masuda model (Pella & Masuda 2001) Bayesian GSI model make stage integrated multistage model. first describe Pella-Masuda model discussing development integrated multistage model. group mixed populations, Pella-Masuda model assigns population identities individual based genetic make-(e.g. genotype). model estimates overall population proportions based numbers individuals assigned population. fishery context, genetic data individuals called mixture sample consists multi-locus genotype individual fish collected mixed-stock fishery. 𝐱\\mathbf x denotes mixture sample. document, bold-font letter represents number set, collection distinct elements. example, 𝐱\\mathbf x set contains individual xx elements. xm,l,jx_{m,l,j} count allele jj locus ll individual fish mm, m∈{1,2,...,M}m \\\\{1,2,...,M\\}, l∈{1,2,...,L}l \\\\{1,2,...,L\\}, j∈{1,2,...,Jl}j \\\\{1,2,...,J_l\\} depends locus ll. Genetic data populations called baseline sample consists genotype compositions various baseline populations collected spawning locations. Researchers select sampling locations best represent populations area. 𝐲\\mathbf y denotes baseline sample. yk,l,jy_{k,l,j} count allele jj locus ll sample size nk,ln_{k,l} collected baseline population kk, k∈{1,2,...,K}k \\\\{1,2,...,K\\}. mixture baseline samples, assumed allele counts locus follow multinomial distribution3. Using another made-example, baseline sample, two allele types locus 1 population 2. Counts two alleles y1,2,1,y1,2,2y_{1,2,1}, y_{1,2,2}, follow multinomial distribution parameters q1,2,1,q1,2,2q_{1,2,1}, q_{1,2,2} size n2,1n_{2,1}. Note q1,2,1,q1,2,2q_{1,2,1}, q_{1,2,2} relative frequencies two alleles locus 1 population 2. Bayesian framework, need specify prior distributions parameters; therefore, place Dirichlet4 prior distribution q1,2,1,q1,2,2q_{1,2,1}, q_{1,2,2} hyperparameters5 β1,1,β1,2\\beta_{1,1}, \\beta_{1,2}. Usually set priors equal loci. example, let β1,1=β1,2=1/2\\beta_{1,1} = \\beta_{1,2} = 1/2 based number alleles locus 1. 𝐪\\mathbf q represents q1,2,1q_{1,2,1} q1,2,2q_{1,2,2}, together allele frequencies loci populations. can see, 𝐪\\mathbf q 𝐲\\mathbf y dimension relative frequency corresponds allele count. model, allele frequencies baseline populations, 𝐪\\mathbf q, determine population proportions. population proportions determines identities individual fish. Individual identities tallied summarized update baseline allele frequencies. 𝐲\\mathbf y can expressed follows: 𝐲k∼Mult(𝐧k,𝐪k)\\mathbf y_k \\sim Mult(\\mathbf n_k, \\mathbf q_k) Prior distribution 𝐪\\mathbf q: 𝐪k∼Dirich(𝛃)\\mathbf q_k \\sim Dirich(\\mathbf \\beta), 𝛃=1/Jl\\mathbf \\beta = 1/J_l mixture sample, allele counts locus individual fish also follows multinomial distributions. fish came certain population, distribution allele counts resemble allele frequencies baseline population came . However, identity individual fish unknown needs estimated. let 𝐳m\\mathbf z_m represent population identify mmth mixture individual. 𝐳m\\mathbf z_m composed 0’s 1 length KK (e.g. number baseline populations). zm,k=1z_{m,k} = 1 individual mm belongs population kk, zm,k=0z_{m,k} = 0 otherwise. made-example, 𝐳100={0,0,1,0,0}\\mathbf z_{100} = \\{0, 0, 1, 0, 0\\} means five baseline populations, individual fish #100 comes population 3. place multinomial prior zm,1,zm,2,...,zm,Kz_{m,1}, z_{m,2}, ..., z_{m,K} size 1 probabilities equal population proportions p1,p2,...,pKp_1, p_2, ..., p_K. specify Dirichlet prior distribution p1,p2,...,pKp_1, p_2, ..., p_K hyperparameters α1,α2,...,αK\\alpha_1, \\alpha_2, ..., \\alpha_K, α1=α2=...=αK=1/K\\alpha_1 = \\alpha_2 = ... = \\alpha_K = 1/K. usually set α\\alpha equal reporting groups, can set based prior knowledge population proportions. express 𝐳\\mathbf z follows: 𝐳m∼Mult(𝟏,𝐩)\\mathbf z_m \\sim Mult(\\mathbf 1, \\mathbf p) Prior distribution 𝐩\\mathbf p: 𝐩∼Dirich(𝛂)\\mathbf p \\sim Dirich(\\mathbf \\alpha), 𝛂=1/K\\mathbf \\alpha = 1/K mentioned, mixture sample, allele counts locus individual fish follows multinomial distributions. parameters allele frequencies corresponding baseline population size numbers ploidy respective locus. Remember population identity zm,k=1z_{m,k} = 1 individual mm belongs population kk, zm,k=0z_{m,k} = 0 otherwise. multiplying population identities, zm,1,zm,2,...,zm,Kz_{m,1}, z_{m,2}, ..., z_{m,K}, allele frequencies baseline populations, 𝐪1,𝐪2,...,𝐪K\\mathbf q_1, \\mathbf q_2, ..., \\mathbf q_K, allele frequencies baseline population individual mm belong remain rest goes zero. 𝐱\\mathbf x expressed . 𝐩𝐥𝐨𝐢𝐝𝐲=ploidy1,ploidy2,...,ploidyL\\mathbf{ploidy} = ploidy_1, ploidy_2, ..., ploidy_L denotes ploidy locus. 𝐱m∼Mult(𝐩𝐥𝐨𝐢𝐝𝐲,𝐳m⋅𝐪)\\mathbf x_m \\sim Mult(\\mathbf{ploidy}, \\mathbf z_m \\cdot \\mathbf q) Moran Anderson (2018) implement genetic mixture analysis R package, rubias. program widely used researchers around world, including GCL. rubias utilizes model structure called conditional genetic stock identification model, conditional GSI model, modified Pella-Masuda model. main difference two models , conditional model, 𝐪\\mathbf q integrated distribution mixture sample, 𝐱m\\mathbf x_m. , baseline allele frequencies updated model. result , 𝐱m\\mathbf x_m takes form compound Dirichlet-multinomial distribution (Johnson el. 1997): 𝐱m∼CDM(𝐩𝐥𝐨𝐢𝐝𝐲,𝐳m⋅𝐯)\\mathbf x_m \\sim CDM(\\mathbf{ploidy}, \\mathbf z_m \\cdot \\mathbf v), 𝐯\\mathbf v 𝛃+𝐲\\mathbf \\beta + \\mathbf y. going attempt proving theory behind conditional model document (details can found Moran & Anderson 2018). since 𝐪\\mathbf q integrated 𝐱m\\mathbf x_m, process estimating parameters simpler streamlined. implemented conditional GSI stage integrated multistage model.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"extend-to-multistage","dir":"Articles","previous_headings":"Methods (math!)","what":"Extend to multistage","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"multistage setting, refer baseline covers whole range mixed stock fishery broad-scale baseline. broad-scale baseline typically covers wide range geographic areas comprehensive collection reference populations genetic markers resolve differences local populations within sub-region. smaller sub-regions broad-scale baseline covered regional baselines higher resolutions. generalize conditions Ms.GSI model allow multiple regional baselines included, although programmed Ms.GSI deal one regional baseline vs. one broad-scale baseline. Let BB populations broad-scale baseline indexed b=1,2,...,Bb = 1, 2, ..., B. broad-scale populations may belong exactly 0 1 sub-region regional baselines might available. regional baselines different sets genetic markers broad-scale baseline typically include additional populations represented broad-scale baseline. Allow RR disjoint sub-regions indexed rr, sub-region represented distinctive regional baseline. employ superscript (r)^{(r)} upon variables indicate quantity associated regional baseline rr. Populations different sub-regions overlap, population occurs among regional baselines. Let kk index populations within RR regional baselines KrK_r denotes number populations within regional baseline rr. Ms.GSI framework, two stages connected regional group membership individual conditional whether broad-scale group membership individual belongs area particular sub-region. following describes conditional relationship broad-scale regional baselines: 𝐳m(r)|𝐳m,ℬ(r)={𝐳m(r)∑b∈ℬ(r)zm,b=1𝟎otherwise\\mathbf z^{(r)}_m | \\mathbf z_m, \\mathbf {\\mathscr B}^{(r)} = \\begin{cases} \\mathbf z^{(r)}_m & \\text{} \\sum_{b \\\\mathbf{\\mathscr B}^{(r)}} z_{m,b}  = 1\\\\ \\mathbf 0 & \\text{otherwise} \\end{cases}, 𝐳m\\mathbf z_m 𝐳m(r)\\mathbf z^{(r)}_m vectors indicators (00 11) identifying broad-scale regional populations individual mm belongs . ℬ(r)\\mathbf{\\mathscr B}^{(r)} denotes broad-scale populations belong areas represented reporting groups region rr, 𝟎\\mathbf 0 vector zeros. Ultimately, want estimate fraction individuals mixture come sub-regional populations, well populations broad-scale baseline associated regional baseline. pk(r)p^{(r)}_k denotes mixture proportion kkth population region rr, pbp_b denotes mixture proportion population bb broad-scale baseline. Thus, endeavor estimate mixture proportions pk(r)p^{(r)}_k (r,k)(r, k) r=1,2,...,Rr = 1, 2, ..., R k=1,2,...,Krk = 1, 2, ..., K_r along pbp_b, b∈ℬ*b \\\\mathbf{\\mathscr B_{*}}, ℬ*\\mathbf{\\mathscr B_{*}} denoting broad-scale populations belong areas represented regional baselines. Lastly, multiply 𝐩(r)\\mathbf {p}^{(r)} ∑b∈ℬ(r)pb\\sum_{b \\\\mathbf{\\mathscr B}^{(r)}} p_b region rr, scaled 𝐩(r)\\mathbf{p}^{(r)} regions pbp_b, b∈ℬ*b \\\\mathbf{\\mathscr B_{*}} sum one.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"gibbs-sampler-where-the-fun-go-round-and-round","dir":"Articles","previous_headings":"Methods (math!)","what":"Gibbs Sampler: where the fun go round and round","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Deriving values parameters stage integrated multistage model requires finding joint posterior distribution Pella-Masuda model stage, 𝐩,𝐪,𝐳,𝐲,𝛂,𝛃\\mathbf p, \\mathbf q,\\mathbf z, \\mathbf y, \\mathbf\\alpha, \\mathbf\\beta. section, introduce concepts algorithm sample posterior distribution single baseline Pella-Masuda model, can extend integrated multistage framework. Gibbs sampler type MCMC methods sequentially sample parameter values Markov chain. enough sampling, Markov chain eventually converge desire distribution interest. appealing quality Gibbs sampler reduction multivariate problem (Pella-Masuda model) series manageable lower-dimensional problems. full description Gibbs sampler MCMC methods beyond scope document; however, information can found numerous resources devoting Bayesian data analysis (see Carlin & Louis 2009; Robert & Casella 2010; Gelman et al. 2014) illustrate, suppose like determine joint posterior distribution interest, p(𝛉|𝐲)p(\\mathbf \\theta|\\mathbf y), 𝛉={θ1,θ2,...,θK}\\mathbf \\theta = \\{\\theta_1, \\theta_2,..., \\theta_K\\}. likely multivariate p(𝛉|𝐲)p(\\mathbf \\theta|\\mathbf y) complicated sample . However, can figure break joint posterior distribution individual full conditional distributions, parameter 𝛉\\mathbf \\theta can sampled one one sequentially using Gibbs sampler algorithm. process begins arbitrary set starting values θ2(0),θ3(0),...,θK(0)\\theta^{(0)}_2, \\theta^{(0)}_3,..., \\theta^{(0)}_K proceeds follows: t=1,2,...,Tt = 1,2,...,T, repeat Draw θ1(t)\\theta^{(t)}_1 p(θ1|θ2(t−1),θ3(t−1),...,θk(t−1),𝐲)p(\\theta_1|\\theta^{(t-1)}_2, \\theta^{(t-1)}_3,..., \\theta^{(t-1)}_k, \\mathbf y) Draw θ2(t)\\theta^{(t)}_2 p(θ2|θ1(t),θ3(t−1),...,θk(t−1),𝐲)p(\\theta_2|\\theta^{(t)}_1, \\theta^{(t-1)}_3,..., \\theta^{(t-1)}_k, \\mathbf y) ⋮ Draw θk(t)\\theta^{(t)}_k p(θk|θ1(t),θ2(t),...,θk−1(t),𝐲)p(\\theta_k|\\theta^{(t)}_1, \\theta^{(t)}_2,..., \\theta^{(t)}_{k-1}, \\mathbf y) work best full conditionals known distributions can easily sample (although ’s required). case Pella-Masuda model, rely two main concepts, Bayes theorem conjugacy, trick. Briefly, estimating parameters 𝛉\\mathbf\\theta data 𝐃\\mathbf D, according Bayes Rule, p(𝛉|𝐃)=p(𝐃|𝛉)p(𝛉)p(𝐃)p(\\mathbf\\theta|\\mathbf D) = \\displaystyle \\frac{p(\\mathbf D|\\mathbf\\theta)p(\\mathbf\\theta)}{p(\\mathbf D)}. p(𝛉|𝐃)p(\\mathbf\\theta|\\mathbf D) joint posterior distribution parameters 𝛉\\mathbf\\theta, p(𝐃|𝛉)p(\\mathbf D|\\mathbf\\theta) likelihood observing data given parameters, p(𝛉)p(\\mathbf\\theta) prior distribution parameters, p(𝐃)p(\\mathbf D) constant marginal distribution data. p(𝐃)p(\\mathbf D) often mathematically difficult obtain; however, p(𝐃)p(\\mathbf D) constant number, can ignore reducing posterior distribution p(𝛉|𝐃)∝p(𝐃|𝛉)p(𝛉)p(\\mathbf\\theta|\\mathbf D) \\propto p(\\mathbf D|\\mathbf\\theta)p(\\mathbf\\theta). , Bayes Rule help us estimating parameters Pella-Masuda model? First, joint posterior distribution split smaller pieces. , separate joint posterior likelihood data priors parameters: p(𝐩,𝐪,𝐳,𝐲,𝛂,𝛃)p(\\mathbf p, \\mathbf q, \\mathbf z, \\mathbf y, \\mathbf\\alpha, \\mathbf\\beta) ∝p(𝐱|𝐳,𝐪)p(𝐲|𝐪)⋅p(𝐩|𝛂)p(𝐪|𝛃)p(𝐳|𝐩)\\propto p(\\mathbf x|\\mathbf z, \\mathbf q) p(\\mathbf y|\\mathbf q) \\cdot p(\\mathbf p|\\mathbf\\alpha) p(\\mathbf q|\\mathbf\\beta) p(\\mathbf z|\\mathbf p) re-arrangements hand-waving, arrive full conditional distributions 𝐪\\mathbf q 𝐩\\mathbf p: p(𝐱|𝐳,𝐪)p(𝐲|𝐪)⋅p(𝐩|𝛂)p(𝐪|𝛃)p(𝐳|𝐩)p(\\mathbf x|\\mathbf z, \\mathbf q) p(\\mathbf y|\\mathbf q) \\cdot p(\\mathbf p|\\mathbf\\alpha) p(\\mathbf q|\\mathbf\\beta) p(\\mathbf z|\\mathbf p) =p(𝐱|𝐳,𝐪)p(𝐲|𝐪)p(𝐪|𝛃)⋅p(𝐳|𝐩)p(𝐩|𝛂)= p(\\mathbf x|\\mathbf z, \\mathbf q) p(\\mathbf y|\\mathbf q) p(\\mathbf q|\\mathbf\\beta) \\cdot p(\\mathbf z|\\mathbf p) p(\\mathbf p|\\mathbf\\alpha) ∝p(𝐱,𝐲,𝐳|𝐪)p(𝐪|𝛃)⋅p(𝐳|𝐩)p(𝐩|𝛂)\\propto p(\\mathbf x,\\mathbf y,\\mathbf z|\\mathbf q) p(\\mathbf q|\\mathbf\\beta) \\cdot p(\\mathbf z|\\mathbf p) p(\\mathbf p|\\mathbf\\alpha) ∝p(𝐪|𝐱,𝐲,𝐳,𝛃)⋅p(𝐩|𝐳,𝛂)\\propto p(\\mathbf q|\\mathbf x,\\mathbf y,\\mathbf z,\\mathbf\\beta) \\cdot p(\\mathbf p|\\mathbf z,\\mathbf\\alpha) Next, take advantage mathematical property called conjugacy help us determine conditional distributions. Based property, posterior distribution follows parametric form prior distribution prior conjugate family likelihood. example, likelihood data binomial distribution prior parameter beta distribution, posterior also beta distribution beta conjugate family binomial. many conjugate families, Dirichlet multinomial another example. Utilizing conjugacy property, determine full conditional distributions 𝐪\\mathbf q 𝐩\\mathbf p.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"conditional-distribution-pqx-y-z-beta","dir":"Articles","previous_headings":"Methods (math!) > Gibbs Sampler: where the fun go round and round","what":"Conditional distribution p(q|x, y, z, β\\beta)","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"determine p(𝐪|𝐱,𝐲,𝐳,𝛃)p(\\mathbf q|\\mathbf x, \\mathbf y, \\mathbf z, \\mathbf \\beta) Dirichlet-distributed Dirichlet prior p(𝐪|𝛃)p(\\mathbf q|\\mathbf \\beta) conjugate family multinomial likelihoods p(𝐱|𝐳,𝐪)p(\\mathbf x|\\mathbf z, \\mathbf q) p(𝐲|𝐪)p(\\mathbf y|\\mathbf q). determine exact parameterization posterior distribution, need derive prior likelihoods first. Likelihood p(𝐱|𝐳,𝐪)p(\\mathbf x|\\mathbf z, \\mathbf q) can derived two steps. first step conditioned likelihood 𝐳\\mathbf z p(𝐱|𝐳,𝐪)∝∏m=1M∏k=1K[f(𝐱m|𝐪k)]zm,kp(\\mathbf x|\\mathbf z, \\mathbf q) \\propto \\displaystyle \\prod^{M}_{m=1} \\prod^{K}_{k=1} [f(\\mathbf x_m|\\mathbf q_k)]^{z_{m,k}}, f(𝐱m|𝐪k)f(\\mathbf x_m|\\mathbf q_k) relative frequency multi-locus genotype individual mm population kk. next step, derive f(𝐱m|𝐪k)f(\\mathbf x_m|\\mathbf q_k): f(𝐱m|𝐪k)∝∏l=1L∏j=1Jlqk,l,jxm,l,jf(\\mathbf x_m|\\mathbf q_k) \\propto \\displaystyle \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{x_{m,l,j}}_{k,l,j} combine two, p(𝐱|𝐳,𝐪)∝∏m=1M∏k=1K[f(𝐱m|𝐪k)]zm,kp(\\mathbf x|\\mathbf z, \\mathbf q) \\propto \\displaystyle \\prod^{M}_{m=1} \\prod^{K}_{k=1} [f(\\mathbf x_m|\\mathbf q_k)]^{z_{m,k}} ∝∏m=1M∏k=1K[∏l=1L∏j=1Jlqk,l,jxm,l,j⋅zm,k]\\propto \\displaystyle \\prod^{M}_{m=1} \\prod^{K}_{k=1} [\\displaystyle \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{x_{m,l,j} \\cdot z_{m,k}}_{k,l,j}] ∝∏k=1K∏l=1L∏j=1Jlqk,l,j∑m=1M(xm,l,j⋅zm,k)\\propto \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\sum^{M}_{m=1} (x_{m,l,j} \\cdot z_{m,k})}_{k,l,j} Deriving likelihood p(𝐲|𝐪)p(\\mathbf y|\\mathbf q) straightforward. product relative frequency multi-locus genotype population: p(𝐲|𝐪)∝∏k=1K∏l=1L∏j=1Jlqk,l,jyk,l,jp(\\mathbf y|\\mathbf q) \\propto \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{y_{k,l,j}}_{k,l,j} p(q|𝛃)p(q|\\mathbf \\beta) Dirichlet prior distribution. probability density kernel6 𝐪𝛃−1\\mathbf q^{\\mathbf \\beta - 1}. can express likelihood p(𝐪|𝛃)∝∏k=1K∏l=1L∏j=1Jlqk,l,jβl,j−1p(\\mathbf q|\\mathbf \\beta) \\propto \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\beta_{l,j} - 1}_{k,l,j}. Put likelihoods together, p(𝐪|𝐱,𝐲,𝐳,𝛃)∝p(𝐱|𝐳,𝐪)p(𝐲|𝐪)p(𝐪|𝛃)p(\\mathbf q|\\mathbf x,\\mathbf y,\\mathbf z,\\mathbf\\beta) \\propto p(\\mathbf x|\\mathbf z, \\mathbf q) p(\\mathbf y|\\mathbf q) p(\\mathbf q|\\mathbf\\beta) ∝∏k=1K∏l=1L∏j=1Jlqk,l,j∑m=1M(xm,l,j⋅zm,k)⋅∏k=1K∏l=1L∏j=1Jlqk,l,jyk,l,j⋅∏k=1K∏l=1L∏j=1Jlqk,l,jβl,j−1\\propto \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\sum^{M}_{m=1} (x_{m,l,j} \\cdot z_{m,k})}_{k,l,j} \\cdot \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{y_{k,l,j}}_{k,l,j} \\cdot \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\beta_{l,j} - 1}_{k,l,j} =∏k=1K∏l=1L∏j=1Jlqk,l,j∑m=1M(xm,l,j⋅zm,k)+yk,l,j+βl,j−1= \\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\sum^{M}_{m=1} (x_{m,l,j} \\cdot z_{m,k}) + y_{k,l,j} + \\beta_{l,j} - 1}_{k,l,j} elementary recognize ∏k=1K∏l=1L∏j=1Jlqk,l,j∑m=1M(xm,l,j⋅zm,k)+yk,l,j+βl,j−1\\displaystyle \\prod^{K}_{k=1} \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} q^{\\sum^{M}_{m=1} (x_{m,l,j} \\cdot z_{m,k}) + y_{k,l,j} + \\beta_{l,j} - 1}_{k,l,j} kernel Dirichlet distribution. Hence, 𝐪k,l|𝐱,𝐲,𝐳,𝛃∼Dirich(∑m=1Mxm,l,jzm,k+yk,l,j+βl,j)\\mathbf q_{k,l}|\\mathbf x,\\mathbf y,\\mathbf z,\\mathbf\\beta \\sim Dirich(\\displaystyle \\sum^{M}_{m=1} x_{m,l,j} z_{m,k} + y_{k,l,j} + \\beta_{l,j}).","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"conditional-distribution-ppz-alpha","dir":"Articles","previous_headings":"Methods (math!) > Gibbs Sampler: where the fun go round and round","what":"Conditional distribution p(p|z, α\\alpha)","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Using logic previously, p(𝐩|𝐳,𝛂)p(\\mathbf p|\\mathbf z,\\mathbf\\alpha) also Dirichlet-distributed due Dirichlet prior p(𝐩|𝛂)p(\\mathbf p|\\mathbf\\alpha) multinomial likelihood p(𝐳|𝐩)p(\\mathbf z|\\mathbf p). p(𝐩|𝐳,𝛂)∝p(𝐳|𝐩)p(𝐩|𝛂)p(\\mathbf p|\\mathbf z,\\mathbf\\alpha) \\propto p(\\mathbf z|\\mathbf p) p(\\mathbf p|\\mathbf\\alpha) ∝∏m=1M∏k=1Kpkzm,k⋅∏k=1Kpkαk−1\\propto \\displaystyle \\prod^{M}_{m=1} \\prod^{K}_{k=1} p^{z_{m,k}}_k \\cdot \\prod^{K}_{k=1} p^{\\alpha_k - 1}_k ∝∏k=1Kpk∑m=1Mzm,k+αk−1\\propto \\displaystyle \\prod^{K}_{k=1} p^{\\sum^M_{m=1}z_{m,k} + \\alpha_k - 1}_k , recognize kernel Dirichlet distribution: 𝐩|𝐳,𝛂∼Dirich(∑m=1Mzm,k+αk)\\mathbf p|\\mathbf z,\\mathbf\\alpha \\sim Dirich(\\displaystyle \\sum^M_{m=1}z_{m,k} + \\alpha_k)","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"algorithm","dir":"Articles","previous_headings":"Methods (math!) > Gibbs Sampler: where the fun go round and round","what":"Algorithm","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"one distribution figure can start Gibbs sampler routine (thought ’re set, lol). need know sample 𝐳m|𝐩,𝐪,𝐱m\\mathbf z_m|\\mathbf p, \\mathbf q, \\mathbf x_m, population identity individual fish mm (components 1 2) given population proportions genotype. probability fish mm belong population kk pkp_k, likelihood observing relative frequency genotype fish mm population kk f(𝐱m|𝐪k)f(\\mathbf x_m|\\mathbf q_k), probability fish mm belong population kk given population proportions genotype pk⋅f(𝐱m|𝐪k)∑k′=1Kpk′⋅f(𝐱m|𝐪k′)\\displaystyle \\frac{p_k \\cdot f(\\mathbf x_m|\\mathbf q_k)}{\\sum^K_{k'=1}p_{k'} \\cdot f(\\mathbf x_m|\\mathbf q_{k'})}. denominator sum one, need calculate numerator. 𝐳m|𝐩,𝐪,𝐱m\\mathbf z_m|\\mathbf p, \\mathbf q, \\mathbf x_m following distribution: 𝐳m|𝐩,𝐪,𝐱m∼Mult(1,𝐰m)\\mathbf z_m|\\mathbf p, \\mathbf q, \\mathbf x_m \\sim Mult(1, \\mathbf{w}_m), wm,k=pk⋅f(𝐱m|𝐪k)w_{m,k} = p_k \\cdot f(\\mathbf x_m|\\mathbf q_k). draw initial values 𝐪k\\mathbf q_k based prior distribution. figured pieces Gibbs sampler single baseline framework, can extend concept multistage framework. Conceptually, use Gibbs sampler sample full conditionals 𝐪\\mathbf q, 𝐩\\mathbf p, 𝐳\\mathbf z, 𝐪(r)\\mathbf q^{(r)}, 𝐩(r)\\mathbf p^{(r)}, 𝐳(r)\\mathbf z^{(r)}. full conditional distributions broad-scale baseline multistage framework stay counterparts single baseline framework. full conditional distributions Gibbs sampler regional stage : 𝐪k,l(r)|𝐱(r),𝐲(r),𝐳(r),𝛃(r)∼Dirich(∑m=1Mxm,l,j(r)zm,k(r)+yk,l,j(r)+βl,j(r))\\mathbf q^{(r)}_{k,l} | \\mathbf x^{(r)},\\mathbf y^{(r)},\\mathbf z^{(r)},\\mathbf\\beta^{(r)} \\sim Dirich(\\displaystyle \\sum^{M}_{m=1} x^{(r)}_{m,l,j} z^{(r)}_{m,k} + y^{(r)}_{k,l,j} + \\beta^{(r)}_{l,j}), 𝐩(r)|𝐳(r),𝐳,ℬ(r),𝛂(r)∼Dirich(∑m=1M(zm,k(r)|zm,b,ℬm,b(r))+αk(r))\\mathbf p^{(r)} | \\mathbf z^{(r)}, \\mathbf z, \\mathbf{\\mathscr B}^{(r)}, \\mathbf \\alpha^{(r)} \\sim Dirich(\\displaystyle \\sum^M_{m=1} (z^{(r)}_{m,k} | z_{m,b}, \\mathscr B^{(r)}_{m,b}) + \\alpha^{(r)}_k), 𝐳m(r)|𝐩(r),𝐪(r),𝐱m(r)∼Mult(1,𝐰m(r))\\mathbf z^{(r)}_m | \\mathbf p^{(r)}, \\mathbf q^{(r)}, \\mathbf x^{(r)}_m \\sim Mult(1, \\mathbf{w}^{(r)}_m), wm,k(r)∝(pk(r)⋅∏l=1L∏j=1Jlq(r)k,l,jxm,l,j)w^{(r)}_{m,k} \\propto (p^{(r)}_k \\cdot \\displaystyle \\prod^{L}_{l=1} \\prod^{J_l}_{j=1} {q^{(r)}}^{x_{m,l,j}}_{k,l,j}). initiate Gibbs sampler starting values 𝐩(0)\\mathbf p^{(0)}, 𝐪(0)\\mathbf q^{(0)}, 𝐩(𝐫)(0)\\mathbf {p^{(r)}}^{(0)} 𝐪(𝐫)(0)\\mathbf {q^{(r)}}^{(0)} based prior distributions. use subscript (t)^{(t)} denote ttth iteration Gibbs sampler. Sampling fully Bayesian model proceeds follows: t=1,2,...,Tt = 1,2,...,T, repeat Determine group memberships mixture individuals broad-scale stage, 𝐳m(t)|𝐩(t−1),𝐪(t−1),𝐱m∼Mult(1,𝐰m)\\mathbf z^{(t)}_m | \\mathbf p^{(t-1)}, \\mathbf q^{(t-1)}, \\mathbf x_m \\sim Mult(1, \\mathbf{w}_m). Determine group memberships mixture individuals sub-region regional stage, 𝐳m(r)(t)|𝐩(r)(t−1),𝐪(r)(t−1),𝐱m(r)∼Mult(1,𝐰m(r)){\\mathbf z^{(r)}_m}^{(t)} | {\\mathbf p^{(r)}}^{(t-1)}, {\\mathbf q^{(r)}}^{(t-1)}, \\mathbf x_m^{(r)} \\sim Mult(1, \\mathbf{w}^{(r)}_m), r=1,2,...,Rr = 1, 2, ..., R. Draw updated values, 𝐪(t)\\mathbf q^{(t)}, 𝐩(t)\\mathbf p^{(t)}, 𝐪(r)(t){{\\mathbf q}^{(r)}}^{(t)} 𝐩(r)(t){{\\mathbf p}^{(r)}}^{(t)} p(𝐪|𝐱,𝐲,𝐳(t),𝛃)p(\\mathbf q | \\mathbf x, \\mathbf y, \\mathbf z^{(t)}, \\mathbf \\beta), p(𝐩|𝐳(t),𝛂)p(\\mathbf p | \\mathbf z^{(t)}, \\mathbf \\alpha), p(𝐪(r)|𝐱(r),𝐲(r),𝐳(r)(t),𝛃(r))p(\\mathbf q^{(r)} | \\mathbf x^{(r)}, \\mathbf y^{(r)}, {\\mathbf z^{(r)}}^{(t)}, \\mathbf \\beta^{(r)}) p(𝐩(r)|𝐳(𝐫)(t),𝐳(t),ℬ(r),𝛂(r))p(\\mathbf p^{(r)} | \\mathbf {z^{(r)}}^{(t)}, \\mathbf z^{(t)}, \\mathbf{\\mathscr B}^{(r)}, \\mathbf \\alpha^{(r)}) respectively. TT large enough ensure simulations converge posterior distribution. Usually takes thousands iterations. Implementing conditional GSI model requires slight modification algorithm. 𝐪\\mathbf q 𝐪(r)\\mathbf q^{(r)} need calculated initial step without updates, otherwise procedures remain .","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/articles/msgsi_vignette.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"*Ms.GSI* in the multistage of genetic stock identification madness","text":"Brooks, S. P., . Gelman. 1998. General methods monitoring convergence iterative simulations. Journal Computational Graphical Statistics. 7:434–455. Carlin, B. T. Louis. 2009. Bayesian Methods Data Analysis, 3rd Edition. CRC Press. New York. Gelman, ., D. B. Rubin. 1992. Inference iterative simulation using multiple sequences. Statistical Science. 7:457–472. Gelman, ., J. Carlin, H. Stern, D. Dunson, . Vehtari D. Rubin. 2014. Bayesian Data Analysis, 3rd Edition. CRC Press. New York. Johnson, N.L., Kotz, S., Balakrishnan, N. 1997. Discrete multivariate distributions. Wiley & Sons, New York. Lee. E., T. Dann, H. Hoyt. 2021. Yukon River Chinook Genetic Baseline Improvements. Yukon River Panel Restoration Enhancement Fund Final Report, URE-163-19N. Moran, B.M. E.C. Anderson. 2018. Bayesian inference conditional genetic stock identification model. Canadian Journal Fisheries Aquatic Sciences. 76(4):551-560. https://doi.org/10.1139/cjfas-2018-0016 Pella, J. M. Masuda. 2001. Bayesian methods analysis stock mixtures genetic characters. Fish. Bull. 99:151–167. Robert, C. G. Casella. 2010. Introducing Monte Carlo Methods R. Springer. New York. Templin, W. D., J. E. Seeb, J. R. Jasper, . W. Barclay, L. W. Seeb. 2011. Genetic differentiation Alaska Chinook salmon: missing link migratory studies. Mol Ecol Resour. 11(Suppl 1):226-246. doi:10.1111/j.1755-0998.2010.02968.x.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bobby Hsu. Author, maintainer. Alaska Dept. Fish & Game. Copyright holder.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hsu B (2025). Ms.GSI: Multistage Genetic Stock Identification. R package version 0.0.0.9000, https://github.com/boppingshoe/Ms.GSI.","code":"@Manual{,   title = {Ms.GSI: Multistage Genetic Stock Identification},   author = {Bobby Hsu},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/boppingshoe/Ms.GSI}, }"},{"path":"https://boppingshoe.github.io/Ms.GSI/index.html","id":"msgsi-","dir":"","previous_headings":"","what":"Multistage Genetic Stock Identification","title":"Multistage Genetic Stock Identification","text":"Ms.GSI help conducting multistage genetic stock identification. package includes functions setup input data, run multistage model, make summary statistics convergence diagnostics. also includes function making trace plots.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multistage Genetic Stock Identification","text":"can install development version Ms.GSI GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"boppingshoe/Ms.GSI\", build_vignettes = TRUE)"},{"path":"https://boppingshoe.github.io/Ms.GSI/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Multistage Genetic Stock Identification","text":"example shows basic workflows running multistage model. First thing first, background: made scenario samples Chinook salmon bycatch Bering Sea groundfish fisheries. mixture sample contains Chinook North Pacific, interested contribution Yukon River. conduct GSI using broad-scale baseline (base_templin) combination regional baseline (base_yukon) multistage framework. fake Chinook data sets pre-loaded Ms.GSI package. prepare input data: Using prepared input data, run model four chains 150 iterations. reality, course run iterations. set first 50 iterations chain warm-ups (kept final output). ’s summary estimates convergence diagnostics. ’s function package make trace plots inspect mixing chains.  Details mathematical model integrated multistage framework instructions using Ms.GSI package can found “articles” tab package website. , installed Ms.GSI, can call article using vignette(\"msgsi_vignette\").","code":"library(Ms.GSI)  msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 7.569319 secs msgsi_out <- msgsi_mdl(msgsi_dat, nreps = 150, nburn = 50, thin = 1, nchains = 4) #> Running model (and the category is... Femme Queen Vogue!) #> Time difference of 1.685267 secs #> April-21-2025 10:23  msgsi_out$summ_comb #> # A tibble: 12 × 9 #>    group                 mean  median      sd    ci.05   ci.95    p0    GR n_eff #>    <chr>                <dbl>   <dbl>   <dbl>    <dbl>   <dbl> <dbl> <dbl> <dbl> #>  1 Russia             2.27e-2 1.91e-2 0.0213  8.31e-12 0.0634  0.11   1.35 102.  #>  2 Coastal West Alas… 9.83e-2 6.30e-2 0.110   1.21e-12 0.305   0.165  3.01  58.4 #>  3 North Alaska Peni… 1.33e-2 9.47e-4 0.0204  1.06e-15 0.0535  0.265  1.20  58.8 #>  4 Northwest Gulf of… 3.70e-1 3.72e-1 0.104   2.02e- 1 0.548   0      1.42  34.9 #>  5 Copper             7.05e-4 6.04e-7 0.00258 1.49e-20 0.00433 0.49   1.01 336.  #>  6 Northeast Gulf of… 5.48e-4 1.08e-6 0.00195 1.11e-19 0.00258 0.475  1.02 400   #>  7 Coastal Southeast… 1.51e-3 3.36e-6 0.00449 4.26e-18 0.00948 0.415  1.10 183.  #>  8 British Columbia   6.31e-4 9.65e-7 0.00191 1.03e-18 0.00384 0.455  1.08 278.  #>  9 WA/OR/CA           5.13e-4 8.51e-7 0.00158 3.24e-18 0.00288 0.492  1.04 371.  #> 10 Lower Yukon        2.42e-1 2.58e-1 0.136   3.23e- 2 0.447   0      2.37 103.  #> 11 Middle Yukon       7.03e-2 6.85e-2 0.0229  3.61e- 2 0.110   0      1.03 433.  #> 12 Upper Yukon        1.79e-1 1.81e-1 0.0339  1.29e- 1 0.244   0      1.03 468. tr_plot(obj = msgsi_out$trace_comb, pop_info = msgsi_out$comb_groups)"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_templin.html","id":null,"dir":"Reference","previous_headings":"","what":"Templin baseline data. — base_templin","title":"Templin baseline data. — base_templin","text":"example genotype data preparing msgsi input data rubias format (prep_msgsi_data() can also take GCL format) making road-scale baseline","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_templin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Templin baseline data. — base_templin","text":"","code":"base_templin"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_templin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Templin baseline data. — base_templin","text":"tibble 29363 rows 60 variables:","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_templin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Templin baseline data. — base_templin","text":"ADF&G GCL database LOKI","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_yukon.html","id":null,"dir":"Reference","previous_headings":"","what":"Yukon baseline data. — base_yukon","title":"Yukon baseline data. — base_yukon","text":"example genotype data preparing msgsi input data rubias format (prep_msgsi_data() can also take GCL format) making regional, finer-scale baseline","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_yukon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yukon baseline data. — base_yukon","text":"","code":"base_yukon"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_yukon.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Yukon baseline data. — base_yukon","text":"tibble 5435 rows 358 variables:","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/base_yukon.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Yukon baseline data. — base_yukon","text":"ADF&G GCL database LOKI","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/indiv_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual assignment summary — indiv_assign","title":"Individual assignment summary — indiv_assign","text":"Individual assignment summary","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/indiv_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual assignment summary — indiv_assign","text":"","code":"indiv_assign(mdl_out, mdl_dat)"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/indiv_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual assignment summary — indiv_assign","text":"mdl_out Model output object name. mdl_dat Input data object name.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/indiv_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Individual assignment summary — indiv_assign","text":"Individual assignment summary","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/indiv_assign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Individual assignment summary — indiv_assign","text":"","code":"# set up input data and run multistage model msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 9.640479 secs  # run model msgsi_out <- msgsi_mdl(msgsi_dat, nreps = 25, nburn = 15, thin = 1, nchains = 1) #> Running model (and the category is... Linen Vs. Silk!) #> Time difference of 1.537729 secs #> April-25-2025 19:09  # individual assignment summary ind_iden <- indiv_assign(msgsi_out, msgsi_dat)"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/mix.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixture data. — mix","title":"Mixture data. — mix","text":"example genotype data preparing msgsi input data rubias format (prep_msgsi_data() can also take GCL format) making mixed population data made mixture sample, real","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/mix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixture data. — mix","text":"","code":"mix"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/mix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mixture data. — mix","text":"tibble 150 rows 358 variables:","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/mix.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mixture data. — mix","text":"ADF&G GCL database LOKI","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/msgsi_mdl.html","id":null,"dir":"Reference","previous_headings":"","what":"Run multistage GSI model — msgsi_mdl","title":"Run multistage GSI model — msgsi_mdl","text":"Run multistage GSI model","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/msgsi_mdl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run multistage GSI model — msgsi_mdl","text":"","code":"msgsi_mdl(   dat_in,   nreps,   nburn,   thin,   nchains,   nadapt = 0,   keep_burn = FALSE,   cond_gsi = TRUE,   file_path = NULL,   seed = NULL,   iden_output = TRUE,   p1_prior_weight = NULL,   p2_prior_weight = NULL )"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/msgsi_mdl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run multistage GSI model — msgsi_mdl","text":"dat_in Name input data. nreps Total number iterations (includes burn-ins). nburn Number warm-runs. thin Frequency thin output. nchains Number independent MCMC processes. nadapt Number adaptation run (default 0). available running model fully Bayesian mode. keep_burn save burn-ins (default FALSE). cond_gsi run model conditional GSI mode (default TRUE). file_path File path save output. Leave empty want save output. seed Random seed reproducibility. Default NULL (random seed). iden_output Option trace history individual assignments included final output. Default TRUE. p1_prior_weight optional tibble specify weight broad-scale reporting group. Columns repunit, grpvec, weight. p2_prior_weight optional tibble specify weight regional reporting group. Columns repunit, grpvec, weight.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/msgsi_mdl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run multistage GSI model — msgsi_mdl","text":"list contains reporting group proportion summary trace tier 1 (summ_t1, trace_t1), tier 2 (summ_t2, trace_t2) two tiers combined (summ_comb, trace_comb), record individual assignment first tier individual (idens).","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/msgsi_mdl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run multistage GSI model — msgsi_mdl","text":"","code":"# setup input data msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 9.075418 secs  # run multistage model msgsi_out <- msgsi_mdl(msgsi_dat, nreps = 25, nburn = 15, thin = 1, nchains = 1) #> Running model (and the category is... Face!) #> Time difference of 1.447003 secs #> April-25-2025 19:09"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/prep_msgsi_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Preparing multistage GSI input data — prep_msgsi_data","title":"Preparing multistage GSI input data — prep_msgsi_data","text":"Preparing multistage GSI input data","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/prep_msgsi_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preparing multistage GSI input data — prep_msgsi_data","text":"","code":"prep_msgsi_data(   mixture_data,   baseline1_data,   baseline2_data,   pop1_info,   pop2_info,   sub_group,   file_path = NULL,   loci1 = NULL,   loci2 = NULL )"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/prep_msgsi_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preparing multistage GSI input data — prep_msgsi_data","text":"mixture_data Individual fish loci tier 1 tier 2. Mixture data GCL rubias format. baseline1_data Tier 1 baseline data GCL rubias format. baseline2_data Tier 2 baseline data GCL rubias format. pop1_info Population information tier 1. tibble columns collection (collection names), repunit (reporting unit names), grpvec (group numbers), origin (wild/hatchery). pop2_info Population information tier 2. tibble columns collection (collection names), repunit (reporting unit names), grpvec (group numbers). sub_group Group numbers groups interest. Group id numbers tier 1 identify groups tier 2. file_path want save copy input data. Leave empty want save copy. loci1 Optional. Provide loci (tier 1) fail-safe check. loci2 Optional. Provide loci (tier 2) fail-safe check.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/prep_msgsi_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preparing multistage GSI input data — prep_msgsi_data","text":"list objects input data msgsi_mdl()","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/prep_msgsi_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preparing multistage GSI input data — prep_msgsi_data","text":"","code":"msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 9.053674 secs"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/stratified_estimator_msgsi.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratified estimator for Ms.GSI — stratified_estimator_msgsi","title":"Stratified estimator for Ms.GSI — stratified_estimator_msgsi","text":"Stratified estimator Ms.GSI","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/stratified_estimator_msgsi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratified estimator for Ms.GSI — stratified_estimator_msgsi","text":"","code":"stratified_estimator_msgsi(   mdl_out = NULL,   path = NULL,   mixvec,   catchvec,   cv = NULL,   new_pop_info = NULL )"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/stratified_estimator_msgsi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratified estimator for Ms.GSI — stratified_estimator_msgsi","text":"mdl_out Optional. Ms.GSI output object name combining group proportions harvest single mixture. path find output mixture folder. mixvec Character vector mixture sillies used locate folders output .csv files lives, mdl_out provided. catchvec Numeric vector harvest mixture/stratum, must order mixvec. cv Numeric vector harvest estimate coefficients variation stratum, must order mixvec. new_pop_info Population information new grouping. tibble columns repunit new_repunit. repunit names original reporting groups.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/stratified_estimator_msgsi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratified estimator for Ms.GSI — stratified_estimator_msgsi","text":"tibble proportions harvest numbers reporting group combined mixtures/strata.","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/stratified_estimator_msgsi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratified estimator for Ms.GSI — stratified_estimator_msgsi","text":"","code":"if (FALSE) { # \\dontrun{ new_groups <- mdl_out$summ_comb %>% dplyr::select(group) %>%  dplyr::mutate(new_repunit = c(rep(\"broad\", 9), rep(\"regional\", 3))) %>%  dplyr::rename(repunit = group)  stratified_estimator_msgsi(path = \"test\", mixvec = c(\"m1\", \"m2\", \"m3\"), catchvec = c(4500, 5000, 3000), cv = c(0.5, 0.1 ,0.3), new_pop_info = new_groups) } # }"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/templin_pops211.html","id":null,"dir":"Reference","previous_headings":"","what":"Templin population infomation. — templin_pops211","title":"Templin population infomation. — templin_pops211","text":"tibble contains collection name, reporting unit, group number 211 populations Templin baseline","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/templin_pops211.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Templin population infomation. — templin_pops211","text":"","code":"templin_pops211"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/templin_pops211.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Templin population infomation. — templin_pops211","text":"tibble 211 rows 3 variables: collection, repunit, grpvec","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/tr_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MCMC trace — tr_plot","title":"Plot MCMC trace — tr_plot","text":"Plot MCMC trace","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/tr_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MCMC trace — tr_plot","text":"","code":"tr_plot(obj, nburn = 0, thin = 1, pop_info = NULL)"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/tr_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MCMC trace — tr_plot","text":"obj Trace model output. nburn Number burn-set ran model. Default 0 save burn-ins (keep_burn = FALSE). thin Number thinning set ran model. Default 1 (thinning). pop_info Population information. tibble columns collection (collection names), repunit (reporting unit names), grpvec (group numbers).","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/tr_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MCMC trace — tr_plot","text":"Trace plot ggplot","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/tr_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot MCMC trace — tr_plot","text":"","code":"# set up input data and run multistage model msgsi_dat <-   prep_msgsi_data(mixture_data = mix,   baseline1_data = base_templin, baseline2_data = base_yukon,   pop1_info = templin_pops211, pop2_info = yukon_pops50, sub_group = 3:5) #> Compiling input data, may take a minute or two... #> Time difference of 9.204038 secs  msgsi_out <- msgsi_mdl(msgsi_dat, nreps = 25, nburn = 15, thin = 1, nchains = 1) #> Running model (and the category is... Mother-Daughter Realness!) #> Time difference of 1.49083 secs #> April-25-2025 19:09  # trace plot tr_plot(obj = msgsi_out$trace_comb, pop_info = msgsi_out$comb_groups)"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/yukon_pops50.html","id":null,"dir":"Reference","previous_headings":"","what":"Yukon population infomation. — yukon_pops50","title":"Yukon population infomation. — yukon_pops50","text":"tibble contains collection name, reporting unit, group number 50 populations Yukon River baseline","code":""},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/yukon_pops50.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yukon population infomation. — yukon_pops50","text":"","code":"yukon_pops50"},{"path":"https://boppingshoe.github.io/Ms.GSI/reference/yukon_pops50.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Yukon population infomation. — yukon_pops50","text":"tibble 50 rows 3 variables: collection, repunit, grpvec","code":""}]
